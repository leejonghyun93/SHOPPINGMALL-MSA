# application.yml - Payment Service 추가된 최종 버전
server:
  port: 8080

eureka:
  instance:
    prefer-ip-address: true
    instance-id: ${spring.application.name}:${spring.application.instance_id:${server.port}}
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone: http://localhost:8761/eureka

spring:
  application:
    name: APIGATEWAY-SERVICE
  cloud:
    gateway:
      #  CORS 설정을 하나로 통합 (중복 제거)
      globalcors:
        cors-configurations:
          '[/**]':
            allowedOriginPatterns:
              - "http://localhost:5173"
              - "http://localhost:3000"
            allowedMethods:
              - GET
              - POST
              - PUT
              - DELETE
              - OPTIONS
              - HEAD
              - PATCH
            allowedHeaders: "*"
            allowCredentials: true
            maxAge: 3600
        add-to-simple-url-handler-mapping: true

      default-filters:
        - name: LoggingFilter
          args:
            baseMessage: "API Gateway"
            preLogger: true
            postLogger: true

      routes:
        # 🔥 💳 PAYMENT SERVICE 라우팅 (가장 먼저 배치!)
        - id: payment-orders-checkout-public
          uri: lb://PAYMENT-SERVICE
          predicates:
            - Path=/api/payments/orders/checkout
            - Method=POST
          filters:
            - name: SimpleJwtFilter  # JWT가 있으면 파싱하되 필수 아님
            - name: LoggingFilter
              args:
                baseMessage: "Payment Orders Checkout"
                preLogger: true
                postLogger: true

        - id: payment-orders-get-public
          uri: lb://PAYMENT-SERVICE
          predicates:
            - Path=/api/payments/orders/**
            - Method=GET
          filters:
            - name: SimpleJwtFilter
            - name: LoggingFilter
              args:
                baseMessage: "Payment Orders GET"
                preLogger: true
                postLogger: true

        - id: payment-verify-public
          uri: lb://PAYMENT-SERVICE
          predicates:
            - Path=/api/payments/verify
            - Method=POST
          filters:
            - name: SimpleJwtFilter
            - name: LoggingFilter
              args:
                baseMessage: "Payment Verify"
                preLogger: true
                postLogger: true

        - id: payment-prepare-public
          uri: lb://PAYMENT-SERVICE
          predicates:
            - Path=/api/payments/prepare
            - Method=POST
          filters:
            - name: SimpleJwtFilter
            - name: LoggingFilter
              args:
                baseMessage: "Payment Prepare"
                preLogger: true
                postLogger: true

        - id: payment-cancel-public
          uri: lb://PAYMENT-SERVICE
          predicates:
            - Path=/api/payments/*/cancel
            - Method=POST
          filters:
            - name: SimpleJwtFilter
            - name: LoggingFilter
              args:
                baseMessage: "Payment Cancel"
                preLogger: true
                postLogger: true

        - id: payment-webhook-public
          uri: lb://PAYMENT-SERVICE
          predicates:
            - Path=/api/payments/webhook
            - Method=POST
          filters:
            - name: LoggingFilter
              args:
                baseMessage: "Payment Webhook"
                preLogger: true
                postLogger: true

        - id: payment-status-public
          uri: lb://PAYMENT-SERVICE
          predicates:
            - Path=/api/payments/**
            - Method=GET
          filters:
            - name: SimpleJwtFilter
            - name: LoggingFilter
              args:
                baseMessage: "Payment Status"
                preLogger: true
                postLogger: true

        # 🖼 IMAGE SERVICE 라우팅
        - id: image-static-files
          uri: lb://IMAGE-SERVICE
          predicates:
            - Path=/images/**
            - Method=GET
          filters:
            - name: LoggingFilter
              args:
                baseMessage: "Image Static Files"
                preLogger: true
                postLogger: true

        - id: image-service-api-public
          uri: lb://IMAGE-SERVICE
          predicates:
            - Path=/api/images/**
            - Method=GET,POST
          filters:
            - name: LoggingFilter
              args:
                baseMessage: "Image Service API Public"
                preLogger: true
                postLogger: true

        - id: image-service-protected
          uri: lb://IMAGE-SERVICE
          predicates:
            - Path=/api/images/**
            - Method=PUT,DELETE,PATCH
          filters:
            - name: JwtAuthorization
            - name: LoggingFilter
              args:
                baseMessage: "Image Service Protected"
                preLogger: true
                postLogger: true

        # AUTH SERVICE 라우팅
        - id: auth-service-public
          uri: lb://AUTH-SERVICE
          predicates:
            - Path=/auth/**
          filters:
            - RewritePath=/auth/(?<segment>.*), /auth/${segment}
            - name: LoggingFilter
              args:
                baseMessage: "Auth Service"
                preLogger: true
                postLogger: true

        #  CART SERVICE 라우팅 - 비회원도 접근 가능하도록 공개
        - id: cart-service-public
          uri: lb://CART-SERVICE
          predicates:
            - Path=/api/cart/**
          filters:
            - name: SimpleJwtFilter
            - name: LoggingFilter
              args:
                baseMessage: "Cart Service Public"
                preLogger: true
                postLogger: true

        #  ORDER SERVICE 공개 라우팅 -  POST 요청도 허용하도록 수정
        - id: order-checkout-public
          uri: lb://ORDER-SERVICE
          predicates:
            - Path=/api/orders/checkout
            - Method=GET,POST
          filters:
            - name: SimpleJwtFilter  #  JWT 토큰이 있으면 파싱하되 필수는 아님
            - name: LoggingFilter
              args:
                baseMessage: "Order Checkout Public"
                preLogger: true
                postLogger: true

        - id: order-service-public-general
          uri: lb://ORDER-SERVICE
          predicates:
            - Path=/api/checkout/**
            - Method=GET,POST
          filters:
            - name: SimpleJwtFilter
            - name: LoggingFilter
              args:
                baseMessage: "Order Service Public General"
                preLogger: true
                postLogger: true

        # USER SERVICE 공개 라우팅 (구체적인 경로부터 먼저)
        - id: user-register-public
          uri: lb://USER-SERVICE
          predicates:
            - Path=/api/users/register
            - Method=POST
          filters:
            - name: LoggingFilter
              args:
                baseMessage: "User Register"
                preLogger: true
                postLogger: true

        - id: user-checkid-public
          uri: lb://USER-SERVICE
          predicates:
            - Path=/api/users/checkUserId
            - Method=GET
          filters:
            - name: LoggingFilter
              args:
                baseMessage: "User Check ID"
                preLogger: true
                postLogger: true

        - id: user-health-public
          uri: lb://USER-SERVICE
          predicates:
            - Path=/api/users/health
            - Method=GET

        - id: user-list-public
          uri: lb://USER-SERVICE
          predicates:
            - Path=/api/users/list
            - Method=GET

        # JWT 인증이 필요한 사용자 경로들 (SimpleJwtFilter 추가)
        - id: user-verify-password-auth
          uri: lb://USER-SERVICE
          predicates:
            - Path=/api/users/verify-password
            - Method=POST
          filters:
            - name: LoggingFilter
              args:
                baseMessage: "User Verify Password"
                preLogger: true
                postLogger: true

        - id: user-profile-get-auth
          uri: lb://USER-SERVICE
          predicates:
            - Path=/api/users/profile
            - Method=GET
          filters:
            - name: SimpleJwtFilter  #  JWT 필터 추가!
            - name: LoggingFilter
              args:
                baseMessage: "User Profile GET"
                preLogger: true
                postLogger: true

        - id: user-withdraw-auth
          uri: lb://USER-SERVICE
          predicates:
            - Path=/api/users/withdraw
            - Method=POST
          filters:
            - name: SimpleJwtFilter  #  JWT 필터 추가 (인증 필요)
            - name: LoggingFilter
              args:
                baseMessage: "User Withdraw"
                preLogger: true
                postLogger: true

        - id: user-profile-put-auth
          uri: lb://USER-SERVICE
          predicates:
            - Path=/api/users/profile
            - Method=PUT
          filters:
            - name: SimpleJwtFilter  #  JWT 필터 추가!
            - name: LoggingFilter
              args:
                baseMessage: "User Profile PUT"
                preLogger: true
                postLogger: true

        # 카테고리 서비스 - 구체적인 패턴부터 먼저
        - id: category-sub-public
          uri: lb://CATEGORY-SERVICE
          predicates:
            - Path=/api/categories/*/sub
            - Method=GET
          filters:
            - name: LoggingFilter
              args:
                baseMessage: "Category Sub API"
                preLogger: true
                postLogger: true

        - id: category-children-ids-public
          uri: lb://CATEGORY-SERVICE
          predicates:
            - Path=/api/categories/*/children-ids
            - Method=GET
          filters:
            - name: LoggingFilter
              args:
                baseMessage: "Category Children IDs API"
                preLogger: true
                postLogger: true

        - id: category-exists-public
          uri: lb://CATEGORY-SERVICE
          predicates:
            - Path=/api/categories/*/exists
            - Method=GET
          filters:
            - name: LoggingFilter
              args:
                baseMessage: "Category Exists API"
                preLogger: true
                postLogger: true

        - id: category-hierarchy-public
          uri: lb://CATEGORY-SERVICE
          predicates:
            - Path=/api/categories/hierarchy
            - Method=GET
          filters:
            - name: LoggingFilter
              args:
                baseMessage: "Category Hierarchy API"
                preLogger: true
                postLogger: true

        - id: category-main-public
          uri: lb://CATEGORY-SERVICE
          predicates:
            - Path=/api/categories/main
            - Method=GET
          filters:
            - name: LoggingFilter
              args:
                baseMessage: "Category Main API"
                preLogger: true
                postLogger: true

        # 가장 일반적인 카테고리 패턴을 마지막에
        - id: category-detail-public
          uri: lb://CATEGORY-SERVICE
          predicates:
            - Path=/api/categories/**
            - Method=GET
          filters:
            - name: LoggingFilter
              args:
                baseMessage: "Category Detail API"
                preLogger: true
                postLogger: true

        #  추가: guest-cart-details 전용 라우트 (가장 구체적이므로 맨 앞에)
        - id: product-guest-cart-details-public
          uri: lb://PRODUCT-SERVICE
          predicates:
            - Path=/api/products/guest-cart-details
            - Method=POST
          filters:
            - name: LoggingFilter
              args:
                baseMessage: "Product Guest Cart Details API"
                preLogger: true
                postLogger: true

        #  상품 서비스 공개 라우팅 (중복 제거 및 ORDER 조정)
        # 더 구체적인 패턴부터 먼저 배치
        - id: product-debug-public
          uri: lb://PRODUCT-SERVICE
          predicates:
            - Path=/api/products/debug/**
            - Method=GET
          filters:
            - name: LoggingFilter
              args:
                baseMessage: "Product Debug API"
                preLogger: true
                postLogger: true

        - id: product-test-public
          uri: lb://PRODUCT-SERVICE
          predicates:
            - Path=/api/products/test/**
            - Method=GET
          filters:
            - name: LoggingFilter
              args:
                baseMessage: "Product Test API"
                preLogger: true
                postLogger: true

        - id: product-stats-public
          uri: lb://PRODUCT-SERVICE
          predicates:
            - Path=/api/products/stats/**
            - Method=GET
          filters:
            - name: LoggingFilter
              args:
                baseMessage: "Product Stats API"
                preLogger: true
                postLogger: true

        - id: product-filter-public
          uri: lb://PRODUCT-SERVICE
          predicates:
            - Path=/api/products/filter
            - Method=GET
          filters:
            - name: LoggingFilter
              args:
                baseMessage: "Product Filter API"
                preLogger: true
                postLogger: true

        - id: product-category-public
          uri: lb://PRODUCT-SERVICE
          predicates:
            - Path=/api/products/category/**
            - Method=GET
          filters:
            - name: LoggingFilter
              args:
                baseMessage: "Product Category API"
                preLogger: true
                postLogger: true

        #  일반적인 상품 조회 (GET만 허용)
        - id: product-service-public-get
          uri: lb://PRODUCT-SERVICE
          predicates:
            - Path=/api/products/**
            - Method=GET
          filters:
            - name: LoggingFilter
              args:
                baseMessage: "Product Service Public GET"
                preLogger: true
                postLogger: true

        #  ORDER SERVICE 라우팅
        - id: order-service-public-get
          uri: lb://ORDER-SERVICE
          predicates:
            - Path=/api/orders/**
            - Method=GET
          filters:
            - name: SimpleJwtFilter  # JWT 토큰이 있으면 파싱하되 필수는 아님
            - name: LoggingFilter
              args:
                baseMessage: "Order Service GET"
                preLogger: true
                postLogger: true

        # ============================================
        #  보호된 경로들은 공개 경로들 이후에 정의
        # ============================================

        #  Order Service 사용자별 주문 조회 (인증 필요)
        - id: order-service-user-protected
          uri: lb://ORDER-SERVICE
          predicates:
            - Path=/api/orders/list, /api/orders/list/**, /api/orders/*/cancel
            - Method=GET,PUT
          filters:
            - name: JwtAuthorization
            - name: LoggingFilter
              args:
                baseMessage: "Order Service User Protected"
                preLogger: true
                postLogger: true

        - id: order-service-protected
          uri: lb://ORDER-SERVICE
          predicates:
            - Path=/api/orders/**
            - Method=POST,PUT,DELETE,PATCH
          filters:
            - name: JwtAuthorization
            - name: LoggingFilter
              args:
                baseMessage: "Order Service Protected"
                preLogger: true
                postLogger: true

        #  상품 서비스 보호된 라우팅 (POST, PUT, DELETE 등)
        - id: product-service-protected
          uri: lb://PRODUCT-SERVICE
          predicates:
            - Path=/api/products/**
            - Method=POST,PUT,DELETE,PATCH
          filters:
            - name: JwtAuthorization
            - name: LoggingFilter
              args:
                baseMessage: "Product Service Protected"
                preLogger: true
                postLogger: true

        #  USER SERVICE 보호된 라우팅을 가장 마지막에 배치
        # 이미 위에서 구체적인 경로들을 정의했으므로, 여기서는 나머지 경로들만 처리됨
        - id: user-service-protected
          uri: lb://USER-SERVICE
          predicates:
            - Path=/api/users/**
            - Method=DELETE,PATCH  #  POST와 PUT 제거 (이미 위에서 처리됨)
          filters:
            - name: JwtAuthorization
            - name: LoggingFilter
              args:
                baseMessage: "User Service Protected"
                preLogger: true
                postLogger: true

logging:
  level:
    org.springframework.cloud.gateway: DEBUG
    org.kosa.apigatewayservice: DEBUG
    org.springframework.cloud.gateway.route: DEBUG
    org.springframework.cloud.gateway.handler: DEBUG
    org.springframework.web: DEBUG
    org.springframework.web.cors: DEBUG

management:
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    health:
      show-details: always
    gateway:
      enabled: true

jwt:
  secret-key: "verySecretKeyThatIsAtLeast32BytesLong1234"