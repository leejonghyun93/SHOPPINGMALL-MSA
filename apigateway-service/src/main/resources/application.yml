server:
  port: 8080

eureka:
  instance:
    prefer-ip-address: true
    instance-id: ${spring.application.name}:${spring.application.instance_id:${server.port}}
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone: http://localhost:8761/eureka

spring:
  application:
    name: apigateway-service
  cloud:
    gateway:
      globalcors:
        cors-configurations:
          '[/**]':
            allowedOrigins: "http://localhost:5173"
            allowedMethods:
              - GET
              - POST
              - PUT
              - DELETE
              - OPTIONS
            allowedHeaders: "*"
            allowCredentials: true
      default-filters:
        - name: LoggingFilter
          args:
            baseMessage: "API Gateway"
            preLogger: true
            postLogger: true

      routes:
        #  공개 경로들 (JWT 인증 불필요)
        - id: auth-service-public
          uri: lb://AUTH-SERVICE
          predicates:
            - Path=/auth/**
          filters:
            - RewritePath=/auth/(?<segment>.*), /auth/${segment}

        - id: user-register-public
          uri: lb://USER-SERVICE
          predicates:
            - Path=/api/users/register
            - Method=POST

        - id: user-checkid-public
          uri: lb://USER-SERVICE
          predicates:
            - Path=/api/users/checkUserid/**
            - Method=GET

        - id: user-list-public
          uri: lb://USER-SERVICE
          predicates:
            - Path=/api/users/list
            - Method=GET

        # 카테고리 서비스 - 더 구체적인 패턴부터!
        - id: category-sub-public
          uri: lb://CATEGORY-SERVICE
          predicates:
            - Path=/api/categories/*/sub
            - Method=GET
          filters:
            - name: LoggingFilter
              args:
                baseMessage: "Category Sub API"
                preLogger: true
                postLogger: true

        - id: category-hierarchy-public
          uri: lb://CATEGORY-SERVICE
          predicates:
            - Path=/api/categories/hierarchy
            - Method=GET
          filters:
            - name: LoggingFilter
              args:
                baseMessage: "Category Hierarchy API"

        - id: category-main-public
          uri: lb://CATEGORY-SERVICE
          predicates:
            - Path=/api/categories/main
            - Method=GET
          filters:
            - name: LoggingFilter
              args:
                baseMessage: "Category Main API"

        # 가장 일반적인 패턴을 마지막에
        - id: category-detail-public
          uri: lb://CATEGORY-SERVICE
          predicates:
            - Path=/api/categories/*
            - Method=GET
          filters:
            - name: LoggingFilter
              args:
                baseMessage: "Category Detail API"

        # 보호된 경로들 (JWT 인증 필요)
        - id: user-service-protected
          uri: lb://USER-SERVICE
          predicates:
            - Path=/api/users/**
          filters:
            - name: JwtAuthorization
            - RewritePath=/api/users/(?<segment>.*), /api/users/${segment}

        - id: user-service-root-protected
          uri: lb://USER-SERVICE
          predicates:
            - Path=/api/users
          filters:
            - name: JwtAuthorization

        # 추가될 다른 서비스들
        - id: product-service-protected
          uri: lb://PRODUCT-SERVICE
          predicates:
            - Path=/api/products/**
          filters:
            - name: JwtAuthorization
            - RewritePath=/api/products/(?<segment>.*), /api/products/${segment}

        - id: order-service-protected
          uri: lb://ORDER-SERVICE
          predicates:
            - Path=/api/orders/**
          filters:
            - name: JwtAuthorization
            - RewritePath=/api/orders/(?<segment>.*), /api/orders/${segment}

logging:
  level:
    org.springframework.cloud.gateway: DEBUG
    org.kosa.apigatewayservice: DEBUG
    org.springframework.cloud.gateway.route: DEBUG
    org.springframework.cloud.gateway.handler: DEBUG

jwt:
  secret-key: "verySecretKeyThatIsAtLeast32BytesLong1234"