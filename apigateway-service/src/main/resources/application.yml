server:
  port: 8080

eureka:
  instance:
    prefer-ip-address: true
    instance-id: ${spring.application.name}:${spring.application.instance_id:${server.port}}
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone: http://localhost:8761/eureka

spring:
  application:
    name: APIGATEWAY-SERVICE
  cloud:
    gateway:
      # üî• CORS ÏÑ§Ï†ïÏùÑ ÌïòÎÇòÎ°ú ÌÜµÌï© (Ï§ëÎ≥µ Ï†úÍ±∞)
      globalcors:
        cors-configurations:
          '[/**]':
            allowedOriginPatterns:
              - "http://localhost:5173"
              - "http://localhost:3000"
            allowedMethods:
              - GET
              - POST
              - PUT
              - DELETE
              - OPTIONS
              - HEAD
              - PATCH
            allowedHeaders: "*"
            allowCredentials: true
            maxAge: 3600
        add-to-simple-url-handler-mapping: true

      default-filters:
        - name: LoggingFilter
          args:
            baseMessage: "API Gateway"
            preLogger: true
            postLogger: true

      routes:
        # AUTH SERVICE ÎùºÏö∞ÌåÖ
        - id: auth-service-public
          uri: lb://AUTH-SERVICE
          predicates:
            - Path=/auth/**
          filters:
            - RewritePath=/auth/(?<segment>.*), /auth/${segment}
            - name: LoggingFilter
              args:
                baseMessage: "Auth Service"
                preLogger: true
                postLogger: true

        # USER SERVICE Í≥µÍ∞ú ÎùºÏö∞ÌåÖ (Íµ¨Ï≤¥Ï†ÅÏù∏ Í≤ΩÎ°úÎ∂ÄÌÑ∞ Î®ºÏ†Ä)
        - id: user-register-public
          uri: lb://USER-SERVICE
          predicates:
            - Path=/api/users/register
            - Method=POST
          filters:
            - name: LoggingFilter
              args:
                baseMessage: "User Register"
                preLogger: true
                postLogger: true

        - id: user-checkid-public
          uri: lb://USER-SERVICE
          predicates:
            - Path=/api/users/checkUserId
            - Method=GET
          filters:
            - name: LoggingFilter
              args:
                baseMessage: "User Check ID"
                preLogger: true
                postLogger: true

        - id: user-health-public
          uri: lb://USER-SERVICE
          predicates:
            - Path=/api/users/health
            - Method=GET

        - id: user-list-public
          uri: lb://USER-SERVICE
          predicates:
            - Path=/api/users/list
            - Method=GET

        - id: user-verify-password-public
          uri: lb://USER-SERVICE
          predicates:
            - Path=/api/users/verify-password
            - Method=POST
          filters:
            - name: LoggingFilter
              args:
                baseMessage: "User Verify Password"
                preLogger: true
                postLogger: true

        - id: user-profile-public
          uri: lb://USER-SERVICE
          predicates:
            - Path=/api/users/profile
            - Method=GET,PUT
          filters:
            - name: LoggingFilter
              args:
                baseMessage: "User Profile"
                preLogger: true
                postLogger: true

        # Ïπ¥ÌÖåÍ≥†Î¶¨ ÏÑúÎπÑÏä§ - Íµ¨Ï≤¥Ï†ÅÏù∏ Ìå®ÌÑ¥Î∂ÄÌÑ∞ Î®ºÏ†Ä
        - id: category-sub-public
          uri: lb://CATEGORY-SERVICE
          predicates:
            - Path=/api/categories/*/sub
            - Method=GET
          filters:
            - name: LoggingFilter
              args:
                baseMessage: "Category Sub API"
                preLogger: true
                postLogger: true

        - id: category-children-ids-public
          uri: lb://CATEGORY-SERVICE
          predicates:
            - Path=/api/categories/*/children-ids
            - Method=GET
          filters:
            - name: LoggingFilter
              args:
                baseMessage: "Category Children IDs API"
                preLogger: true
                postLogger: true

        - id: category-exists-public
          uri: lb://CATEGORY-SERVICE
          predicates:
            - Path=/api/categories/*/exists
            - Method=GET
          filters:
            - name: LoggingFilter
              args:
                baseMessage: "Category Exists API"
                preLogger: true
                postLogger: true

        - id: category-hierarchy-public
          uri: lb://CATEGORY-SERVICE
          predicates:
            - Path=/api/categories/hierarchy
            - Method=GET
          filters:
            - name: LoggingFilter
              args:
                baseMessage: "Category Hierarchy API"
                preLogger: true
                postLogger: true

        - id: category-main-public
          uri: lb://CATEGORY-SERVICE
          predicates:
            - Path=/api/categories/main
            - Method=GET
          filters:
            - name: LoggingFilter
              args:
                baseMessage: "Category Main API"
                preLogger: true
                postLogger: true

        # Í∞ÄÏû• ÏùºÎ∞òÏ†ÅÏù∏ Ïπ¥ÌÖåÍ≥†Î¶¨ Ìå®ÌÑ¥ÏùÑ ÎßàÏßÄÎßâÏóê
        - id: category-detail-public
          uri: lb://CATEGORY-SERVICE
          predicates:
            - Path=/api/categories/**
            - Method=GET
          filters:
            - name: LoggingFilter
              args:
                baseMessage: "Category Detail API"
                preLogger: true
                postLogger: true

        # üî• ÏÉÅÌíà ÏÑúÎπÑÏä§ Í≥µÍ∞ú ÎùºÏö∞ÌåÖ (Ï§ëÎ≥µ Ï†úÍ±∞ Î∞è ORDER Ï°∞Ï†ï)
        # Îçî Íµ¨Ï≤¥Ï†ÅÏù∏ Ìå®ÌÑ¥Î∂ÄÌÑ∞ Î®ºÏ†Ä Î∞∞Ïπò
        - id: product-debug-public
          uri: lb://PRODUCT-SERVICE
          predicates:
            - Path=/api/products/debug/**
            - Method=GET
          filters:
            - name: LoggingFilter
              args:
                baseMessage: "Product Debug API"
                preLogger: true
                postLogger: true

        - id: product-test-public
          uri: lb://PRODUCT-SERVICE
          predicates:
            - Path=/api/products/test/**
            - Method=GET
          filters:
            - name: LoggingFilter
              args:
                baseMessage: "Product Test API"
                preLogger: true
                postLogger: true

        - id: product-stats-public
          uri: lb://PRODUCT-SERVICE
          predicates:
            - Path=/api/products/stats/**
            - Method=GET
          filters:
            - name: LoggingFilter
              args:
                baseMessage: "Product Stats API"
                preLogger: true
                postLogger: true

        - id: product-filter-public
          uri: lb://PRODUCT-SERVICE
          predicates:
            - Path=/api/products/filter
            - Method=GET
          filters:
            - name: LoggingFilter
              args:
                baseMessage: "Product Filter API"
                preLogger: true
                postLogger: true

        - id: product-category-public
          uri: lb://PRODUCT-SERVICE
          predicates:
            - Path=/api/products/category/**
            - Method=GET
          filters:
            - name: LoggingFilter
              args:
                baseMessage: "Product Category API"
                preLogger: true
                postLogger: true

        # üî• ÏùºÎ∞òÏ†ÅÏù∏ ÏÉÅÌíà Ï°∞Ìöå (GETÎßå ÌóàÏö©)
        - id: product-service-public-get
          uri: lb://PRODUCT-SERVICE
          predicates:
            - Path=/api/products/**
            - Method=GET
          filters:
            - name: LoggingFilter
              args:
                baseMessage: "Product Service Public GET"
                preLogger: true
                postLogger: true

        # üî• Î≥¥Ìò∏Îêú Í≤ΩÎ°úÎì§ (JWT Ïù∏Ï¶ù ÌïÑÏöî) - Í≥µÍ∞ú Í≤ΩÎ°ú Ïù¥ÌõÑÏóê Î∞∞Ïπò
        - id: user-service-protected
          uri: lb://USER-SERVICE
          predicates:
            - Path=/api/users/**
            - Method=POST,PUT,DELETE,PATCH
          filters:
            - name: JwtAuthorization
            - name: LoggingFilter
              args:
                baseMessage: "User Service Protected"
                preLogger: true
                postLogger: true

        # üî• ÏÉÅÌíà ÏÑúÎπÑÏä§ Î≥¥Ìò∏Îêú ÎùºÏö∞ÌåÖ (POST, PUT, DELETE Îì±)
        - id: product-service-protected
          uri: lb://PRODUCT-SERVICE
          predicates:
            - Path=/api/products/**
            - Method=POST,PUT,DELETE,PATCH
          filters:
            - name: JwtAuthorization
            - name: LoggingFilter
              args:
                baseMessage: "Product Service Protected"
                preLogger: true
                postLogger: true

        - id: order-service-protected
          uri: lb://ORDER-SERVICE
          predicates:
            - Path=/api/orders/**
          filters:
            - name: JwtAuthorization
            - name: LoggingFilter
              args:
                baseMessage: "Order Service"
                preLogger: true
                postLogger: true

logging:
  level:
    org.springframework.cloud.gateway: DEBUG
    org.kosa.apigatewayservice: DEBUG
    org.springframework.cloud.gateway.route: DEBUG
    org.springframework.cloud.gateway.handler: DEBUG
    org.springframework.web: DEBUG
    org.springframework.web.cors: DEBUG

jwt:
  secret-key: "verySecretKeyThatIsAtLeast32BytesLong1234"