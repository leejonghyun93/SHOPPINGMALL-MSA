# application.yml - Q&A Service ÎùºÏö∞ÌåÖ Ï∂îÍ∞Ä (URI Ïò§ÌÉÄ ÏàòÏ†ï)
server:
  port: 8080

eureka:
  instance:
    prefer-ip-address: true
    instance-id: ${spring.application.name}:${spring.application.instance_id:${server.port}}
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone: http://localhost:8761/eureka

spring:
  application:
    name: APIGATEWAY-SERVICE
  cloud:
    config:
      enabled: false
    gateway:
      globalcors:
        cors-configurations:
          '[/**]':
            allowedOriginPatterns:
              - "http://localhost:5173"
              - "http://localhost:3000"
            allowedMethods:
              - GET
              - POST
              - PUT
              - DELETE
              - OPTIONS
              - HEAD
              - PATCH
            allowedHeaders: "*"
            allowCredentials: true
            maxAge: 3600
        add-to-simple-url-handler-mapping: true

      default-filters:
        - name: DedupeResponseHeader
          args:
            name: Access-Control-Allow-Origin Access-Control-Allow-Credentials
            strategy: RETAIN_UNIQUE
        - name: LoggingFilter
          args:
            baseMessage: "API Gateway"
            preLogger: true
            postLogger: true

      routes:
        # ===============================================
        # üî• Q&A SERVICE ÎùºÏö∞ÌåÖ (Board Service ÎÇ¥Î∂Ä)
        # ===============================================
        - id: qna-health-check
          uri: lb://BOARD-SERVICE
          predicates:
            - Path=/api/qna/health
            - Method=GET
          filters:
            - name: LoggingFilter
              args:
                baseMessage: "Q&A Health Check"
                preLogger: true
                postLogger: true

        # Q&A ÏÉÅÌíàÎ≥Ñ Ï°∞Ìöå (Í≥µÍ∞ú)
        - id: qna-product-public
          uri: lb://BOARD-SERVICE
          predicates:
            - Path=/api/qna/product/**
            - Method=GET
          filters:
            - name: LoggingFilter
              args:
                baseMessage: "Q&A Product Public"
                preLogger: true
                postLogger: true

        # Q&A Î™©Î°ù Ï°∞Ìöå (Í≥µÍ∞ú)
        - id: qna-list-public
          uri: lb://BOARD-SERVICE
          predicates:
            - Path=/api/qna/list
            - Method=GET
          filters:
            - name: LoggingFilter
              args:
                baseMessage: "Q&A List Public"
                preLogger: true
                postLogger: true

        # ÎÇ¥ Q&A Ï°∞Ìöå (Ïù∏Ï¶ù ÌïÑÏöî)
        - id: qna-my-protected
          uri: lb://BOARD-SERVICE
          predicates:
            - Path=/api/qna/my
            - Method=GET
          filters:
            - name: JwtAuthorization
            - name: LoggingFilter
              args:
                baseMessage: "Q&A My Protected"
                preLogger: true
                postLogger: true

        # Q&A ÏÉÅÏÑ∏ Ï°∞Ìöå (Í≥µÍ∞ú)
        - id: qna-detail-public
          uri: lb://BOARD-SERVICE
          predicates:
            - Path=/api/qna/**
            - Method=GET
          filters:
            - name: LoggingFilter
              args:
                baseMessage: "Q&A Detail Public"
                preLogger: true
                postLogger: true

        # Q&A ÏûëÏÑ±/ÏàòÏ†ï/ÏÇ≠Ï†ú (Ïù∏Ï¶ù ÌïÑÏöî)
        - id: qna-service-protected
          uri: lb://BOARD-SERVICE
          predicates:
            - Path=/api/qna,/api/qna/**
            - Method=POST,PUT,DELETE,PATCH
          filters:
            - name: JwtAuthorization
            - name: LoggingFilter
              args:
                baseMessage: "Q&A Service Protected"
                preLogger: true
                postLogger: true

        # ===============================================
        # BOARD SERVICE ÎùºÏö∞ÌåÖ (Î¶¨Î∑∞)
        # ===============================================
        - id: board-health-check
          uri: lb://BOARD-SERVICE
          predicates:
            - Path=/api/board/health
            - Method=GET
          filters:
            - name: LoggingFilter
              args:
                baseMessage: "Board Health Check"
                preLogger: true
                postLogger: true

        - id: board-product-reviews-public
          uri: lb://BOARD-SERVICE
          predicates:
            - Path=/api/board/product/**
            - Method=GET
          filters:
            - name: LoggingFilter
              args:
                baseMessage: "Board Product Reviews"
                preLogger: true
                postLogger: true

        - id: board-review-list-public
          uri: lb://BOARD-SERVICE
          predicates:
            - Path=/api/board/list
            - Method=GET
          filters:
            - name: LoggingFilter
              args:
                baseMessage: "Board Review List"
                preLogger: true
                postLogger: true

        - id: board-review-detail-public
          uri: lb://BOARD-SERVICE
          predicates:
            - Path=/api/board/**
            - Method=GET
          filters:
            - name: LoggingFilter
              args:
                baseMessage: "Board Review Detail"
                preLogger: true
                postLogger: true

        # Ïù∏Ï¶ùÏù¥ ÌïÑÏöîÌïú Board Service ÏûëÏóÖÎì§
        - id: board-service-protected
          uri: lb://BOARD-SERVICE
          predicates:
            - Path=/api/board/**
            - Method=POST,PUT,DELETE,PATCH
          filters:
            - name: JwtAuthorization
            - name: LoggingFilter
              args:
                baseMessage: "Board Service Protected"
                preLogger: true
                postLogger: true

        # ===============================================
        # USER SERVICE ÎùºÏö∞ÌåÖ
        # ===============================================

        # üî• ÏàòÏ†ï: URI Ïò§ÌÉÄ ÏàòÏ†ï (lb:// ÌòïÏãùÏúºÎ°ú)
        - id: user-findId-public
          uri: lb://USER-SERVICE
          predicates:
            - Path=/api/users/findId
            - Method=GET
          filters:
            - name: LoggingFilter
              args:
                baseMessage: "User Find ID"
                preLogger: true
                postLogger: true

        # USER SERVICE Í≥µÍ∞ú ÎùºÏö∞ÌåÖ (Íµ¨Ï≤¥Ï†ÅÏù∏ Í≤ΩÎ°úÎ∂ÄÌÑ∞ Î®ºÏ†Ä)
        - id: user-register-public
          uri: lb://USER-SERVICE
          predicates:
            - Path=/api/users/register
            - Method=POST
          filters:
            - name: LoggingFilter
              args:
                baseMessage: "User Register"
                preLogger: true
                postLogger: true

        - id: user-checkid-public
          uri: lb://USER-SERVICE
          predicates:
            - Path=/api/users/checkUserId
            - Method=GET
          filters:
            - name: LoggingFilter
              args:
                baseMessage: "User Check ID"
                preLogger: true
                postLogger: true

        - id: user-health-public
          uri: lb://USER-SERVICE
          predicates:
            - Path=/api/users/health
            - Method=GET
          filters:
            - name: LoggingFilter
              args:
                baseMessage: "User Health"
                preLogger: true
                postLogger: true

        - id: user-list-public
          uri: lb://USER-SERVICE
          predicates:
            - Path=/api/users/list
            - Method=GET
          filters:
            - name: LoggingFilter
              args:
                baseMessage: "User List"
                preLogger: true
                postLogger: true

        # JWT Ïù∏Ï¶ùÏù¥ ÌïÑÏöîÌïú ÏÇ¨Ïö©Ïûê Í≤ΩÎ°úÎì§
        - id: user-verify-password-auth
          uri: lb://USER-SERVICE
          predicates:
            - Path=/api/users/verify-password
            - Method=POST
          filters:
            - name: LoggingFilter
              args:
                baseMessage: "User Verify Password"
                preLogger: true
                postLogger: true

        - id: user-profile-get-auth
          uri: lb://USER-SERVICE
          predicates:
            - Path=/api/users/profile
            - Method=GET
          filters:
            - name: LoggingFilter
              args:
                baseMessage: "User Profile GET"
                preLogger: true
                postLogger: true

        - id: user-withdraw-auth
          uri: lb://USER-SERVICE
          predicates:
            - Path=/api/users/withdraw
            - Method=POST
          filters:
            - name: LoggingFilter
              args:
                baseMessage: "User Withdraw"
                preLogger: true
                postLogger: true

        - id: user-profile-put-auth
          uri: lb://USER-SERVICE
          predicates:
            - Path=/api/users/profile
            - Method=PUT
          filters:
            - name: LoggingFilter
              args:
                baseMessage: "User Profile PUT"
                preLogger: true
                postLogger: true

        # ===============================================
        # Í∏∞ÌÉÄ ÏÑúÎπÑÏä§ ÎùºÏö∞ÌåÖ
        # ===============================================

        # Ï£ºÎ¨∏ Ï∑®ÏÜå
        - id: order-cancel-protected
          uri: lb://ORDER-SERVICE
          predicates:
            - Path=/api/orders/*/cancel
            - Method=POST
          filters:
            - name: JwtAuthorization
            - name: LoggingFilter
              args:
                baseMessage: "Order Cancel Protected"
                preLogger: true
                postLogger: true

        # üé• BROADCAST SERVICE ÎùºÏö∞ÌåÖ
        - id: broadcast-live-public
          uri: lb://BROADCAST-SERVICE
          predicates:
            - Path=/api/broadcasts/live
            - Method=GET
          filters:
            - name: LoggingFilter
              args:
                baseMessage: "Broadcast Live Public"
                preLogger: true
                postLogger: true

        - id: broadcast-schedule-public
          uri: lb://BROADCAST-SERVICE
          predicates:
            - Path=/api/broadcasts/schedule
            - Method=GET
          filters:
            - name: LoggingFilter
              args:
                baseMessage: "Broadcast Schedule Public"
                preLogger: true
                postLogger: true

        - id: broadcast-category-public
          uri: lb://BROADCAST-SERVICE
          predicates:
            - Path=/api/broadcasts/category/**
            - Method=GET
          filters:
            - name: LoggingFilter
              args:
                baseMessage: "Broadcast Category Public"
                preLogger: true
                postLogger: true

        - id: broadcast-detail-public
          uri: lb://BROADCAST-SERVICE
          predicates:
            - Path=/api/broadcasts/**
            - Method=GET
          filters:
            - name: LoggingFilter
              args:
                baseMessage: "Broadcast Detail Public"
                preLogger: true
                postLogger: true

        # Î∞©ÏÜ° ÏÉùÏÑ±/ÏàòÏ†ï/ÏÇ≠Ï†ú Îì±ÏùÄ Ïù∏Ï¶ù ÌïÑÏöî
        - id: broadcast-service-protected
          uri: lb://BROADCAST-SERVICE
          predicates:
            - Path=/api/broadcasts/**
            - Method=POST,PUT,DELETE,PATCH
          filters:
            - name: JwtAuthorization
            - name: LoggingFilter
              args:
                baseMessage: "Broadcast Service Protected"
                preLogger: true
                postLogger: true

        # PAYMENT SERVICE ÎùºÏö∞ÌåÖ
        - id: payment-orders-checkout-public
          uri: lb://PAYMENT-SERVICE
          predicates:
            - Path=/api/payments/orders/checkout
            - Method=POST
          filters:
            - name: LoggingFilter
              args:
                baseMessage: "Payment Orders Checkout"
                preLogger: true
                postLogger: true

        - id: payment-webhook-public
          uri: lb://PAYMENT-SERVICE
          predicates:
            - Path=/api/payments/webhook
            - Method=POST
          filters:
            - name: LoggingFilter
              args:
                baseMessage: "Payment Webhook"
                preLogger: true
                postLogger: true

        - id: payment-status-public
          uri: lb://PAYMENT-SERVICE
          predicates:
            - Path=/api/payments/**
            - Method=GET
          filters:
            - name: LoggingFilter
              args:
                baseMessage: "Payment Status"
                preLogger: true
                postLogger: true

        # üñº IMAGE SERVICE ÎùºÏö∞ÌåÖ
        - id: image-static-files
          uri: lb://IMAGE-SERVICE
          predicates:
            - Path=/images/**
            - Method=GET
          filters:
            - name: LoggingFilter
              args:
                baseMessage: "Image Static Files"
                preLogger: true
                postLogger: true

        - id: image-service-api-public
          uri: lb://IMAGE-SERVICE
          predicates:
            - Path=/api/images/**
            - Method=GET,POST
          filters:
            - name: LoggingFilter
              args:
                baseMessage: "Image Service API Public"
                preLogger: true
                postLogger: true

        # AUTH SERVICE ÎùºÏö∞ÌåÖ
        - id: auth-service-public
          uri: lb://AUTH-SERVICE
          predicates:
            - Path=/auth/**
          filters:
            - RewritePath=/auth/(?<segment>.*), /auth/${segment}
            - name: LoggingFilter
              args:
                baseMessage: "Auth Service"
                preLogger: true
                postLogger: true

        # CART SERVICE ÎùºÏö∞ÌåÖ
        - id: cart-service-public
          uri: lb://CART-SERVICE
          predicates:
            - Path=/api/cart/**
          filters:
            - name: LoggingFilter
              args:
                baseMessage: "Cart Service"
                preLogger: true
                postLogger: true

        # ORDER SERVICE ÎùºÏö∞ÌåÖ
        - id: order-checkout-public
          uri: lb://ORDER-SERVICE
          predicates:
            - Path=/api/orders/checkout
            - Method=GET,POST
          filters:
            - name: LoggingFilter
              args:
                baseMessage: "Order Checkout Public"
                preLogger: true
                postLogger: true

        # Ïπ¥ÌÖåÍ≥†Î¶¨ ÏÑúÎπÑÏä§
        - id: category-hierarchy-public
          uri: lb://CATEGORY-SERVICE
          predicates:
            - Path=/api/categories/hierarchy
            - Method=GET
          filters:
            - name: LoggingFilter
              args:
                baseMessage: "Category Hierarchy API"
                preLogger: true
                postLogger: true

        - id: category-detail-public
          uri: lb://CATEGORY-SERVICE
          predicates:
            - Path=/api/categories/**
            - Method=GET
          filters:
            - name: LoggingFilter
              args:
                baseMessage: "Category Detail API"
                preLogger: true
                postLogger: true

        # ÏÉÅÌíà ÏÑúÎπÑÏä§
        - id: product-guest-cart-details-public
          uri: lb://PRODUCT-SERVICE
          predicates:
            - Path=/api/products/guest-cart-details
            - Method=POST
          filters:
            - name: LoggingFilter
              args:
                baseMessage: "Product Guest Cart Details API"
                preLogger: true
                postLogger: true

        - id: product-service-public-get
          uri: lb://PRODUCT-SERVICE
          predicates:
            - Path=/api/products/**
            - Method=GET
          filters:
            - name: LoggingFilter
              args:
                baseMessage: "Product Service Public GET"
                preLogger: true
                postLogger: true

        # ============================================
        # Î≥¥Ìò∏Îêú Í≤ΩÎ°úÎì§
        # ============================================

        # Order Service Î≥¥Ìò∏Îêú Í≤ΩÎ°ú
        - id: order-service-protected
          uri: lb://ORDER-SERVICE
          predicates:
            - Path=/api/orders/**
            - Method=POST,PUT,DELETE,PATCH
          filters:
            - name: JwtAuthorization
            - name: LoggingFilter
              args:
                baseMessage: "Order Service Protected"
                preLogger: true
                postLogger: true

        # Product Service Î≥¥Ìò∏Îêú Í≤ΩÎ°ú
        - id: product-service-protected
          uri: lb://PRODUCT-SERVICE
          predicates:
            - Path=/api/products/**
            - Method=POST,PUT,DELETE,PATCH
          filters:
            - name: JwtAuthorization
            - name: LoggingFilter
              args:
                baseMessage: "Product Service Protected"
                preLogger: true
                postLogger: true

        # User Service Î≥¥Ìò∏Îêú Í≤ΩÎ°ú
        - id: user-service-protected
          uri: lb://USER-SERVICE
          predicates:
            - Path=/api/users/**
            - Method=DELETE,PATCH
          filters:
            - name: JwtAuthorization
            - name: LoggingFilter
              args:
                baseMessage: "User Service Protected"
                preLogger: true
                postLogger: true

        # NOTIFICATION SERVICE ÎùºÏö∞ÌåÖ
        - id: notification-health-public
          uri: lb://NOTIFICATION-SERVICE
          predicates:
            - Path=/api/notifications/health
            - Method=GET
          filters:
            - name: LoggingFilter
              args:
                baseMessage: "Notification Health Check"
                preLogger: true
                postLogger: true

        - id: notification-service-public
          uri: lb://NOTIFICATION-SERVICE
          predicates:
            - Path=/api/notifications/**
            - Method=GET
          filters:
            - name: LoggingFilter
              args:
                baseMessage: "Notification Service Public"
                preLogger: true
                postLogger: true

        # ÎπÑÎ∞ÄÎ≤àÌò∏ Ï∞æÍ∏∞ (Í≥µÍ∞ú)
        - id: auth-findpassword-public
          uri: lb://AUTH-SERVICE
          predicates:
            - Path=/auth/findPassword
            - Method=POST
          filters:
            - name: LoggingFilter
              args:
                baseMessage: "Auth Find Password"
                preLogger: true
                postLogger: true

        # Ïù∏Ï¶ùÎ≤àÌò∏ Í≤ÄÏ¶ù (Í≥µÍ∞ú)
        - id: auth-verify-reset-code-public
          uri: lb://AUTH-SERVICE
          predicates:
            - Path=/auth/verifyResetCode
            - Method=POST
          filters:
            - name: LoggingFilter
              args:
                baseMessage: "Auth Verify Reset Code"
                preLogger: true
                postLogger: true

        # ÎπÑÎ∞ÄÎ≤àÌò∏ Ïû¨ÏÑ§Ï†ï (Í≥µÍ∞ú)
        - id: auth-reset-password-public
          uri: lb://AUTH-SERVICE
          predicates:
            - Path=/auth/resetPassword
            - Method=POST
          filters:
            - name: LoggingFilter
              args:
                baseMessage: "Auth Reset Password"
                preLogger: true
                postLogger: true

        # Í∏∞Ï°¥ AUTH SERVICE ÎùºÏö∞ÌåÖ (ÏùºÎ∞òÏ†ÅÏù∏ Í≤ΩÎ°ú, Îß® ÎßàÏßÄÎßâÏóê ÏúÑÏπòÌï¥Ïïº Ìï®)
        - id: auth-service-public
          uri: lb://AUTH-SERVICE
          predicates:
            - Path=/auth/**
          filters:
            - RewritePath=/auth/(?<segment>.*), /auth/${segment}
            - name: LoggingFilter
              args:
                baseMessage: "Auth Service"
                preLogger: true
                postLogger: true

logging:
  level:
    org.springframework.cloud.gateway: DEBUG
    org.kosa.apigatewayservice: DEBUG
    org.springframework.cloud.gateway.route: DEBUG
    org.springframework.cloud.gateway.handler: DEBUG

management:
  endpoints:
    web:
      exposure:
        include: ["refresh", "busrefresh", "prometheus", "health", "info"]
  endpoint:
    prometheus:
      enabled: true
    health:
      show-details: always

jwt:
  secret-key: "verySecretKeyThatIsAtLeast32BytesLong1234"