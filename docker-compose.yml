version: '3.8'

services:
  # ======================
  # 데이터베이스
  # ======================

  # MariaDB - 메인 데이터베이스
  mariadb:
    image: mariadb:10.11
    container_name: shopmall-mariadb
    ports:
      - "3307:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=${DB_ROOT_PASSWORD:-rootpassword123}
      - MYSQL_DATABASE=${DB_NAME:-shoppingmall_db}
      - MYSQL_USER=${DB_USERNAME:-shopmall_user}
      - MYSQL_PASSWORD=${DB_PASSWORD:-shopmall_pass123}
      - MYSQL_CHARACTER_SET_SERVER=utf8mb4
      - MYSQL_COLLATION_SERVER=utf8mb4_unicode_ci
    volumes:
      - mariadb_data:/var/lib/mysql
      - ./init-db:/docker-entrypoint-initdb.d:ro  # 초기 SQL 스크립트
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.3'
        reservations:
          memory: 128M
    networks:
      - msa-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${DB_ROOT_PASSWORD:-rootpassword123}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # ======================
  # 인프라 서비스들
  # ======================

  # Redis - 캐시 및 세션 저장소
  redis:
    image: redis:7-alpine
    container_name: shopmall-redis
    ports:
      - "6379:6379"
    command: redis-server --maxmemory 64mb --maxmemory-policy allkeys-lru
    deploy:
      resources:
        limits:
          memory: 80M
          cpus: '0.1'
        reservations:
          memory: 40M
    volumes:
      - redis_data:/data
    networks:
      - msa-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 3s
      retries: 3

  # Zookeeper - Kafka용
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: shopmall-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    deploy:
      resources:
        limits:
          memory: 96M
          cpus: '0.1'
        reservations:
          memory: 48M
    volumes:
      - zk_data:/var/lib/zookeeper/data
      - zk_logs:/var/lib/zookeeper/log
    networks:
      - msa-network
    restart: unless-stopped

  # Kafka - 메시지 큐
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: shopmall-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://${KAFKA_HOST:-kafka}:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_HEAP_OPTS: "-Xmx96m -Xms48m"
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.15'
        reservations:
          memory: 64M
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - msa-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server=localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ======================
  # MSA 핵심 서비스들
  # ======================

  # Eureka 서비스 디스커버리
  eureka-service:
    build:
      context: ./eureka-service
      dockerfile: Dockerfile
    container_name: shopmall-eureka
    ports:
      - "8761:8761"
    environment:
      - SPRING_PROFILES_ACTIVE=${SPRING_PROFILES_ACTIVE:-prod}
      - JAVA_OPTS=-Xmx128m -Xms64m -XX:+UseG1GC
    deploy:
      resources:
        limits:
          memory: 160M
          cpus: '0.2'
        reservations:
          memory: 80M
    networks:
      - msa-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8761/actuator/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 60s

  # Config 서버
  config-service:
    build:
      context: ./config-service
      dockerfile: Dockerfile
    container_name: shopmall-config
    ports:
      - "8888:8888"
    environment:
      - SPRING_PROFILES_ACTIVE=${SPRING_PROFILES_ACTIVE:-prod}
      - CONFIG_REPO_GIT_URI=${CONFIG_REPO_GIT_URI}
      - CONFIG_GIT_USERNAME=${CONFIG_GIT_USERNAME:-}
      - CONFIG_GIT_PASSWORD=${CONFIG_GIT_PASSWORD:-}
      - CONFIG_SERVER_USERNAME=${CONFIG_SERVER_USERNAME:-config}
      - CONFIG_SERVER_PASSWORD=${CONFIG_SERVER_PASSWORD}
      - EUREKA_CLIENT_SERVICE_URL=http://eureka-service:8761/eureka
      - JAVA_OPTS=-Xmx96m -Xms48m -XX:+UseG1GC
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.15'
        reservations:
          memory: 64M
    depends_on:
      eureka-service:
        condition: service_healthy
    networks:
      - msa-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8888/actuator/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 60s

  # 인증 서비스 (3개 인스턴스)
  auth-service:
    build:
      context: ./auth-service
      dockerfile: Dockerfile
    # container_name 제거됨 - 다중 인스턴스용
    ports:
      - "8082-8084:8082"  # 3개 인스턴스용 포트 범위
    environment:
      - SPRING_PROFILES_ACTIVE=${SPRING_PROFILES_ACTIVE:-prod}
      - EUREKA_CLIENT_SERVICE_URL=http://eureka-service:8761/eureka
      - SPRING_CONFIG_IMPORT=optional:configserver:http://config-service:8888
      - SPRING_REDIS_HOST=redis
      - SPRING_REDIS_PORT=6379
      # DB 연결 정보 (내부 MariaDB 사용)
      - SPRING_DATASOURCE_URL=jdbc:mariadb://mariadb:3306/${DB_NAME:-shoppingmall_db}
      - SPRING_DATASOURCE_USERNAME=${DB_USERNAME:-shopmall_user}
      - SPRING_DATASOURCE_PASSWORD=${DB_PASSWORD:-shopmall_pass123}
      # 환경별 환경변수 주입
      - PROD_REDIS_HOST=${PROD_REDIS_HOST:-redis}
      - PROD_REDIS_PASSWORD=${PROD_REDIS_PASSWORD:-}
      - PROD_MAIL_USERNAME=${PROD_MAIL_USERNAME}
      - PROD_MAIL_PASSWORD=${PROD_MAIL_PASSWORD}
      - PROD_JWT_SECRET_KEY=${PROD_JWT_SECRET_KEY}
      - JAVA_OPTS=-Xmx80m -Xms40m -XX:+UseG1GC
    deploy:
      replicas: 3  # 3개 인스턴스
      resources:
        limits:
          memory: 112M
          cpus: '0.15'
        reservations:
          memory: 56M
    depends_on:
      mariadb:
        condition: service_healthy
      eureka-service:
        condition: service_healthy
      config-service:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - msa-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/actuator/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 60s

  # 사용자 서비스 (3개 인스턴스)
  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile
    # container_name 제거됨 - 다중 인스턴스용
    ports:
      - "8103-8105:8103"  # 3개 인스턴스용 포트 범위
    environment:
      - SPRING_PROFILES_ACTIVE=${SPRING_PROFILES_ACTIVE:-prod}
      - EUREKA_CLIENT_SERVICE_URL=http://eureka-service:8761/eureka
      - SPRING_CONFIG_IMPORT=optional:configserver:http://config-service:8888
      - SPRING_REDIS_HOST=redis
      - SPRING_REDIS_PORT=6379
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      # DB 연결 정보 (내부 MariaDB 사용)
      - SPRING_DATASOURCE_URL=jdbc:mariadb://mariadb:3306/${DB_NAME:-shoppingmall_db}
      - SPRING_DATASOURCE_USERNAME=${DB_USERNAME:-shopmall_user}
      - SPRING_DATASOURCE_PASSWORD=${DB_PASSWORD:-shopmall_pass123}
      # 환경별 환경변수 주입
      - PROD_REDIS_HOST=${PROD_REDIS_HOST:-redis}
      - PROD_REDIS_PASSWORD=${PROD_REDIS_PASSWORD:-}
      - PROD_KAFKA_SERVERS=${PROD_KAFKA_SERVERS:-kafka:9092}
      - PROD_AUTH_SERVICE_URL=${PROD_AUTH_SERVICE_URL:-http://auth-service}
      - JAVA_OPTS=-Xmx80m -Xms40m -XX:+UseG1GC
    deploy:
      replicas: 3  # 3개 인스턴스
      resources:
        limits:
          memory: 112M
          cpus: '0.15'
        reservations:
          memory: 56M
    depends_on:
      mariadb:
        condition: service_healthy
      eureka-service:
        condition: service_healthy
      config-service:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - msa-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8103/actuator/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 60s

  # 커머스 서비스 (3개 인스턴스)
  commerce-service:
    build:
      context: ./commerce-service
      dockerfile: Dockerfile
    # container_name 제거됨 - 다중 인스턴스용
    ports:
      - "8090-8092:8090"  # 3개 인스턴스용 포트 범위
    environment:
      - SPRING_PROFILES_ACTIVE=${SPRING_PROFILES_ACTIVE:-prod}
      - EUREKA_CLIENT_SERVICE_URL=http://eureka-service:8761/eureka
      - SPRING_CONFIG_IMPORT=optional:configserver:http://config-service:8888
      - SPRING_REDIS_HOST=redis
      - SPRING_REDIS_PORT=6379
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      # DB 연결 정보 (내부 MariaDB 사용)
      - SPRING_DATASOURCE_URL=jdbc:mariadb://mariadb:3306/${DB_NAME:-shoppingmall_db}
      - SPRING_DATASOURCE_USERNAME=${DB_USERNAME:-shopmall_user}
      - SPRING_DATASOURCE_PASSWORD=${DB_PASSWORD:-shopmall_pass123}
      # 환경별 환경변수 주입
      - PROD_REDIS_HOST=${PROD_REDIS_HOST:-redis}
      - PROD_REDIS_PASSWORD=${PROD_REDIS_PASSWORD:-}
      - PROD_KAFKA_SERVERS=${PROD_KAFKA_SERVERS:-kafka:9092}
      - PROD_IAMPORT_API_KEY=${PROD_IAMPORT_API_KEY}
      - PROD_IAMPORT_API_SECRET=${PROD_IAMPORT_API_SECRET}
      - PROD_IMAGE_UPLOAD_PATH=${PROD_IMAGE_UPLOAD_PATH:-/app/uploads/products/}
      - PROD_IMAGE_BASE_URL=${PROD_IMAGE_BASE_URL}
      - JAVA_OPTS=-Xmx96m -Xms48m -XX:+UseG1GC
    deploy:
      replicas: 3  # 3개 인스턴스
      resources:
        limits:
          memory: 128M
          cpus: '0.15'
        reservations:
          memory: 64M
    depends_on:
      mariadb:
        condition: service_healthy
      eureka-service:
        condition: service_healthy
      config-service:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - msa-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8090/actuator/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 60s

  # 라이브 스트리밍 서비스 (2개 인스턴스)
  live-streaming-service:
    build:
      context: ./live-streaming-service
      dockerfile: Dockerfile
    # container_name 제거됨 - 다중 인스턴스용
    ports:
      - "8096-8097:8096"  # 2개 인스턴스용 포트 범위
    environment:
      - SPRING_PROFILES_ACTIVE=${SPRING_PROFILES_ACTIVE:-prod}
      - EUREKA_CLIENT_SERVICE_URL=http://eureka-service:8761/eureka
      - SPRING_CONFIG_IMPORT=optional:configserver:http://config-service:8888
      - SPRING_REDIS_HOST=redis
      - SPRING_REDIS_PORT=6379
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      # DB 연결 정보 (내부 MariaDB 사용) - 라이브 서비스도 DB 필요하다면
      - SPRING_DATASOURCE_URL=jdbc:mariadb://mariadb:3306/${DB_NAME:-shoppingmall_db}
      - SPRING_DATASOURCE_USERNAME=${DB_USERNAME:-shopmall_user}
      - SPRING_DATASOURCE_PASSWORD=${DB_PASSWORD:-shopmall_pass123}
      # 환경별 환경변수 주입 (기본 공통 설정 사용)
      - PROD_REDIS_HOST=${PROD_REDIS_HOST:-redis}
      - PROD_REDIS_PASSWORD=${PROD_REDIS_PASSWORD:-}
      - PROD_KAFKA_SERVERS=${PROD_KAFKA_SERVERS:-kafka:9092}
      - JAVA_OPTS=-Xmx128m -Xms64m -XX:+UseG1GC
    deploy:
      replicas: 2  # 2개 인스턴스 (WebSocket 특성상 적게 설정)
      resources:
        limits:
          memory: 160M
          cpus: '0.2'
        reservations:
          memory: 80M
    depends_on:
      mariadb:
        condition: service_healthy
      eureka-service:
        condition: service_healthy
      config-service:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - msa-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8096/actuator/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 60s

  # API Gateway (단일 인스턴스 유지)
  apigateway-service:
    build:
      context: ./apigateway-service
      dockerfile: Dockerfile
    container_name: shopmall-gateway
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=${SPRING_PROFILES_ACTIVE:-prod}
      - EUREKA_CLIENT_SERVICE_URL=http://eureka-service:8761/eureka
      - SPRING_CONFIG_IMPORT=optional:configserver:http://config-service:8888
      - SPRING_REDIS_HOST=redis
      - SPRING_REDIS_PORT=6379
      # 환경별 환경변수 주입
      - FRONTEND_URL=${FRONTEND_URL:-https://shopmall.com}
      - ADMIN_URL=${ADMIN_URL:-https://admin.shopmall.com}
      - JWT_SECRET=${PROD_JWT_SECRET_KEY}
      - JAVA_OPTS=-Xmx112m -Xms56m -XX:+UseG1GC
    deploy:
      resources:
        limits:
          memory: 144M
          cpus: '0.2'
        reservations:
          memory: 72M
    depends_on:
      eureka-service:
        condition: service_healthy
      config-service:
        condition: service_healthy
      auth-service:
        condition: service_started
      user-service:
        condition: service_started
      commerce-service:
        condition: service_started
      live-streaming-service:
        condition: service_started
    networks:
      - msa-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 60s

  # ======================
  # 모니터링 서비스들 (선택적)
  # ======================

  # Prometheus - 메트릭 수집
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: shopmall-prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--storage.tsdb.retention.time=7d'
      - '--storage.tsdb.retention.size=512MB'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.15'
        reservations:
          memory: 64M
    networks:
      - msa-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 5s
      retries: 3
    profiles:
      - monitoring

  # Grafana - 메트릭 시각화
  grafana:
    image: grafana/grafana:10.0.0
    container_name: shopmall-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    deploy:
      resources:
        limits:
          memory: 96M
          cpus: '0.1'
        reservations:
          memory: 48M
    depends_on:
      - prometheus
    networks:
      - msa-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 3
    profiles:
      - monitoring

networks:
  msa-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  mariadb_data:
    driver: local
  redis_data:
    driver: local
  kafka_data:
    driver: local
  zk_data:
    driver: local
  zk_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# ======================
# 사용법:
# 기본 실행 (MSA 서비스만): docker-compose up -d
# 모니터링 포함: docker-compose --profile monitoring up -d
# 특정 서비스 스케일 조정: docker-compose up -d --scale auth-service=5
# ======================

# ======================
# 필요한 .env 파일 예시:
# DB_ROOT_PASSWORD=rootpassword123
# DB_NAME=shoppingmall_db
# DB_USERNAME=shopmall_user
# DB_PASSWORD=shopmall_pass123
# PROD_JWT_SECRET_KEY=your-jwt-secret-key
# ======================