services:
  # ======================
  # 데이터베이스
  # ======================

  # MariaDB - 메인 데이터베이스
  mariadb:
    image: mariadb:10.11
    container_name: shopmall-mariadb
    ports:
      - "3306:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=${DB_ROOT_PASSWORD}
      - MYSQL_DATABASE=${DB_NAME:-live_commerce_db}
      - MYSQL_USER=${DB_USERNAME:-kosa}
      - MYSQL_PASSWORD=${DB_PASSWORD}
      - MYSQL_CHARACTER_SET_SERVER=utf8mb4
      - MYSQL_COLLATION_SERVER=utf8mb4_unicode_ci
    volumes:
      - mariadb_data:/var/lib/mysql
      - ./init-db:/docker-entrypoint-initdb.d:ro
    deploy:
      resources:
        limits:
          memory: 384M
          cpus: '0.3'
        reservations:
          memory: 192M
    networks:
      - msa-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${DB_ROOT_PASSWORD}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # ======================
  # 인프라 서비스들
  # ======================

  # Redis - 캐시 및 세션 저장소
  redis:
    image: redis:7-alpine
    container_name: shopmall-redis
    ports:
      - "6379:6379"
    command: redis-server --maxmemory 64mb --maxmemory-policy allkeys-lru
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.1'
        reservations:
          memory: 64M
    volumes:
      - redis_data:/data
    networks:
      - msa-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 3s
      retries: 3

  # RabbitMQ - 메시지 브로커
  rabbitmq:
    image: rabbitmq:3-management
    container_name: shopmall-rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin123
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.2'
        reservations:
          memory: 256M
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - msa-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 60s
      timeout: 20s
      retries: 10
      start_period: 120s

  # Zookeeper - Kafka용
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: shopmall-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      KAFKA_HEAP_OPTS: "-Xms64m -Xmx256m"
    deploy:
      resources:
        limits:
          memory: 384M
          cpus: '0.1'
        reservations:
          memory: 192M
    volumes:
      - zk_data:/var/lib/zookeeper/data
      - zk_logs:/var/lib/zookeeper/log
    networks:
      - msa-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nc", "-vz", "localhost", "2181"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Kafka - 메시지 큐
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: shopmall-kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://${KAFKA_HOST:-kafka}:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_HEAP_OPTS: "-Xmx256m -Xms128m"
      KAFKA_LOG_CLEANER_ENABLE: "false"
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.2'
        reservations:
          memory: 256M
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - msa-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nc", "-vz", "localhost", "9092"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s

  # ======================
  # MSA 핵심 서비스들 (ECR 이미지 사용)
  # ======================

  # Config 서버
  config-service:
    image: ${ECR_REGISTRY}/config-service:latest
    container_name: shopmall-config
    ports:
      - "8888:8888"
    environment:
      - SPRING_PROFILES_ACTIVE=${SPRING_PROFILES_ACTIVE:-prod}
      - CONFIG_REPO_GIT_URI=${CONFIG_REPO_GIT_URI}
      - CONFIG_GIT_USERNAME=${CONFIG_GIT_USERNAME:-}
      - CONFIG_GIT_PASSWORD=${CONFIG_GIT_PASSWORD:-}
      - CONFIG_SERVER_USERNAME=${CONFIG_SERVER_USERNAME:-config}
      - CONFIG_SERVER_PASSWORD=${CONFIG_SERVER_PASSWORD}
      - EUREKA_CLIENT_ENABLED=false
      - SPRING_RABBITMQ_HOST=rabbitmq
      - SPRING_RABBITMQ_PORT=5672
      - SPRING_RABBITMQ_USERNAME=admin
      - SPRING_RABBITMQ_PASSWORD=admin123
      - JAVA_OPTS=-Xmx256m -Xms128m -XX:+UseG1GC
    deploy:
      resources:
        limits:
          memory: 384M
          cpus: '0.15'
        reservations:
          memory: 192M
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - msa-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8888/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 8
      start_period: 120s

  # Eureka 서비스 디스커버리 - 강제 단일 모드
  eureka-service:
    image: ${ECR_REGISTRY}/eureka-service:latest
    container_name: shopmall-eureka
    ports:
      - "8761:8761"
    environment:
      - SPRING_PROFILES_ACTIVE=${SPRING_PROFILES_ACTIVE:-prod}
      - CONFIG_SERVER_URL=${CONFIG_SERVER_URL:-http://config-service:8888}
      - SPRING_CONFIG_IMPORT=optional:configserver:${CONFIG_SERVER_URL:-http://config-service:8888}

      # Config Server 설정 강제 override
      - SPRING_CLOUD_CONFIG_FAIL_FAST=${SPRING_CLOUD_CONFIG_FAIL_FAST:-false}

      # 강제 단일 Eureka 인스턴스 설정 (Config Server override)
      - EUREKA_CLIENT_REGISTER_WITH_EUREKA=false
      - EUREKA_CLIENT_FETCH_REGISTRY=false
      - EUREKA_INSTANCE_HOSTNAME=eureka-service
      - EUREKA_SERVER_ENABLE_SELF_PRESERVATION=${EUREKA_SERVER_ENABLE_SELF_PRESERVATION:-false}
      - EUREKA_SERVER_PEER_EUREKA_NODES_UPDATE_INTERVAL_MS=${EUREKA_SERVER_PEER_EUREKA_NODES_UPDATE_INTERVAL_MS:-60000}
      - EUREKA_SERVER_PEER_NODE_READ_TIMEOUT_MS=${EUREKA_SERVER_PEER_NODE_READ_TIMEOUT_MS:-5000}

      # 클러스터 모드 완전 비활성화
      - EUREKA_CLIENT_SHOULD_UNREGISTER_ON_SHUTDOWN=true
      - EUREKA_CLIENT_SHOULD_ENFORCE_REGISTRATION_AT_INIT=true

      - JAVA_OPTS=-Xmx256m -Xms128m -XX:+UseG1GC
    deploy:
      resources:
        limits:
          memory: 384M
          cpus: '0.15'
        reservations:
          memory: 192M
    depends_on:
      config-service:
        condition: service_healthy
    networks:
      - msa-network
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8761/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 150s

  # 인증 서비스
  auth-service:
    image: ${ECR_REGISTRY}/auth-service:latest
    container_name: shopmall-auth
    ports:
      - "8082:8082"
    environment:
      - SPRING_APPLICATION_NAME=auth-service
      - SPRING_PROFILES_ACTIVE=${SPRING_PROFILES_ACTIVE:-prod}
      - CONFIG_SERVER_URL=${CONFIG_SERVER_URL:-http://config-service:8888}
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://eureka-service:8761/eureka
      - SPRING_CONFIG_IMPORT=optional:configserver:${CONFIG_SERVER_URL:-http://config-service:8888}
      - SPRING_REDIS_HOST=redis
      - SPRING_REDIS_PORT=6379
      - SPRING_DATASOURCE_URL=${PROD_DB_URL}
      - SPRING_DATASOURCE_USERNAME=${PROD_DB_USERNAME}
      - SPRING_DATASOURCE_PASSWORD=${PROD_DB_PASSWORD}
      - PROD_REDIS_HOST=${PROD_REDIS_HOST:-redis}
      - PROD_REDIS_PORT=${PROD_REDIS_PORT:-6379}
      - PROD_REDIS_PASSWORD=${PROD_REDIS_PASSWORD:-}
      - PROD_MAIL_USERNAME=${PROD_MAIL_USERNAME}
      - PROD_MAIL_PASSWORD=${PROD_MAIL_PASSWORD}
      - PROD_JWT_SECRET_KEY=${PROD_JWT_SECRET_KEY}
      - PROD_EUREKA_SERVER_URL=${PROD_EUREKA_SERVER_URL}
      - PROD_USER_SERVICE_URL=${PROD_USER_SERVICE_URL}
      - HOST_IP_ADDRESS=${HOST_IP_ADDRESS}

      # Eureka 클라이언트 설정
      - EUREKA_CLIENT_ENABLED=${EUREKA_CLIENT_ENABLED:-true}
      - EUREKA_CLIENT_REGISTER_WITH_EUREKA=${EUREKA_CLIENT_REGISTER_WITH_EUREKA:-true}
      - EUREKA_CLIENT_FETCH_REGISTRY=${EUREKA_CLIENT_FETCH_REGISTRY:-true}
      - EUREKA_INSTANCE_PREFER_IP_ADDRESS=${EUREKA_INSTANCE_PREFER_IP_ADDRESS:-true}
      - EUREKA_INSTANCE_LEASE_RENEWAL_INTERVAL_IN_SECONDS=${EUREKA_INSTANCE_LEASE_RENEWAL_INTERVAL_IN_SECONDS:-10}
      - EUREKA_INSTANCE_LEASE_EXPIRATION_DURATION_IN_SECONDS=${EUREKA_INSTANCE_LEASE_EXPIRATION_DURATION_IN_SECONDS:-30}

      # Spring Cloud Discovery 설정
      - SPRING_CLOUD_DISCOVERY_ENABLED=${SPRING_CLOUD_DISCOVERY_ENABLED:-true}
      - SPRING_CLOUD_SERVICE_REGISTRY_AUTO_REGISTRATION_ENABLED=${SPRING_CLOUD_SERVICE_REGISTRY_AUTO_REGISTRATION_ENABLED:-true}

      # Management Endpoints 설정
      - MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE=${MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE:-health,info,metrics,env,beans}
      - MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS=${MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS:-always}

      - JAVA_OPTS=-Xmx256m -Xms128m -XX:+UseG1GC
    deploy:
      resources:
        limits:
          memory: 384M
          cpus: '0.15'
        reservations:
          memory: 192M
    depends_on:
      mariadb:
        condition: service_healthy
      eureka-service:
        condition: service_healthy
      config-service:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - msa-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/actuator/health"]
      interval: 60s
      timeout: 30s
      retries: 10
      start_period: 180s

  # 사용자 서비스
  user-service:
    image: ${ECR_REGISTRY}/user-service:latest
    container_name: shopmall-user
    ports:
      - "8103:8103"
    environment:
      - SPRING_APPLICATION_NAME=user-service
      - SPRING_PROFILES_ACTIVE=${SPRING_PROFILES_ACTIVE:-prod}
      - CONFIG_SERVER_URL=${CONFIG_SERVER_URL:-http://config-service:8888}
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://eureka-service:8761/eureka
      - SPRING_CONFIG_IMPORT=optional:configserver:${CONFIG_SERVER_URL:-http://config-service:8888}
      - SPRING_REDIS_HOST=redis
      - SPRING_REDIS_PORT=6379
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - SPRING_DATASOURCE_URL=${PROD_DB_URL}
      - SPRING_DATASOURCE_USERNAME=${PROD_DB_USERNAME}
      - SPRING_DATASOURCE_PASSWORD=${PROD_DB_PASSWORD}
      - PROD_REDIS_HOST=${PROD_REDIS_HOST:-redis}
      - PROD_REDIS_PORT=${PROD_REDIS_PORT:-6379}
      - PROD_REDIS_PASSWORD=${PROD_REDIS_PASSWORD:-}
      - PROD_KAFKA_SERVERS=${PROD_KAFKA_SERVERS}
      - PROD_KAFKA_TOPIC_USER_WITHDRAWAL=${PROD_KAFKA_TOPIC_USER_WITHDRAWAL}
      - PROD_AUTH_SERVICE_URL=${PROD_AUTH_SERVICE_URL}
      - PROD_EUREKA_SERVER_URL=${PROD_EUREKA_SERVER_URL}
      - HOST_IP_ADDRESS=${HOST_IP_ADDRESS}

      # Eureka 클라이언트 설정
      - EUREKA_CLIENT_ENABLED=${EUREKA_CLIENT_ENABLED:-true}
      - EUREKA_CLIENT_REGISTER_WITH_EUREKA=${EUREKA_CLIENT_REGISTER_WITH_EUREKA:-true}
      - EUREKA_CLIENT_FETCH_REGISTRY=${EUREKA_CLIENT_FETCH_REGISTRY:-true}
      - EUREKA_INSTANCE_PREFER_IP_ADDRESS=${EUREKA_INSTANCE_PREFER_IP_ADDRESS:-true}
      - EUREKA_INSTANCE_LEASE_RENEWAL_INTERVAL_IN_SECONDS=${EUREKA_INSTANCE_LEASE_RENEWAL_INTERVAL_IN_SECONDS:-10}
      - EUREKA_INSTANCE_LEASE_EXPIRATION_DURATION_IN_SECONDS=${EUREKA_INSTANCE_LEASE_EXPIRATION_DURATION_IN_SECONDS:-30}

      # Spring Cloud Discovery 설정
      - SPRING_CLOUD_DISCOVERY_ENABLED=${SPRING_CLOUD_DISCOVERY_ENABLED:-true}
      - SPRING_CLOUD_SERVICE_REGISTRY_AUTO_REGISTRATION_ENABLED=${SPRING_CLOUD_SERVICE_REGISTRY_AUTO_REGISTRATION_ENABLED:-true}

      # Management Endpoints 설정
      - MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE=${MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE:-health,info,metrics,env,beans}
      - MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS=${MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS:-always}

      - JAVA_OPTS=-Xmx256m -Xms128m -XX:+UseG1GC
    deploy:
      resources:
        limits:
          memory: 384M
          cpus: '0.15'
        reservations:
          memory: 192M
    depends_on:
      mariadb:
        condition: service_healthy
      eureka-service:
        condition: service_healthy
      config-service:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - msa-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8103/actuator/health"]
      interval: 60s
      timeout: 30s
      retries: 10
      start_period: 180s

  # 커머스 서비스
  commerce-service:
    image: ${ECR_REGISTRY}/commerce-service:latest
    container_name: shopmall-commerce
    ports:
      - "8090:8090"
    environment:
      - SPRING_APPLICATION_NAME=commerce-service
      - SPRING_PROFILES_ACTIVE=${SPRING_PROFILES_ACTIVE:-prod}
      - CONFIG_SERVER_URL=${CONFIG_SERVER_URL:-http://config-service:8888}
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://eureka-service:8761/eureka
      - SPRING_CONFIG_IMPORT=optional:configserver:${CONFIG_SERVER_URL:-http://config-service:8888}
      - SPRING_REDIS_HOST=redis
      - SPRING_REDIS_PORT=6379
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092

      # RabbitMQ 환경변수
      - SPRING_RABBITMQ_HOST=rabbitmq
      - SPRING_RABBITMQ_PORT=5672
      - SPRING_RABBITMQ_USERNAME=admin
      - SPRING_RABBITMQ_PASSWORD=admin123
      - PROD_RABBITMQ_HOST=rabbitmq
      - PROD_RABBITMQ_PORT=5672
      - PROD_RABBITMQ_USERNAME=admin
      - PROD_RABBITMQ_PASSWORD=admin123

      - SPRING_DATASOURCE_URL=${PROD_DB_URL}
      - SPRING_DATASOURCE_USERNAME=${PROD_DB_USERNAME}
      - SPRING_DATASOURCE_PASSWORD=${PROD_DB_PASSWORD}
      - SPRING_JPA_HIBERNATE_DDL_AUTO=none
      - PROD_REDIS_HOST=${PROD_REDIS_HOST:-redis}
      - PROD_REDIS_PORT=${PROD_REDIS_PORT:-6379}
      - PROD_REDIS_PASSWORD=${PROD_REDIS_PASSWORD:-}
      - PROD_KAFKA_SERVERS=${PROD_KAFKA_SERVERS}
      - PROD_IAMPORT_API_KEY=${PROD_IAMPORT_API_KEY}
      - PROD_IAMPORT_API_SECRET=${PROD_IAMPORT_API_SECRET}
      - PROD_IMAGE_UPLOAD_PATH=${PROD_IMAGE_UPLOAD_PATH:-/app/uploads/products/}
      - PROD_IMAGE_BASE_URL=${PROD_IMAGE_BASE_URL}
      - PROD_EUREKA_SERVER_URL=${PROD_EUREKA_SERVER_URL}
      - PROD_USER_SERVICE_URL=${PROD_USER_SERVICE_URL}
      - HOST_IP_ADDRESS=${HOST_IP_ADDRESS}

      # Eureka 클라이언트 설정
      - EUREKA_CLIENT_ENABLED=${EUREKA_CLIENT_ENABLED:-true}
      - EUREKA_CLIENT_REGISTER_WITH_EUREKA=${EUREKA_CLIENT_REGISTER_WITH_EUREKA:-true}
      - EUREKA_CLIENT_FETCH_REGISTRY=${EUREKA_CLIENT_FETCH_REGISTRY:-true}
      - EUREKA_INSTANCE_PREFER_IP_ADDRESS=${EUREKA_INSTANCE_PREFER_IP_ADDRESS:-true}
      - EUREKA_INSTANCE_LEASE_RENEWAL_INTERVAL_IN_SECONDS=${EUREKA_INSTANCE_LEASE_RENEWAL_INTERVAL_IN_SECONDS:-10}
      - EUREKA_INSTANCE_LEASE_EXPIRATION_DURATION_IN_SECONDS=${EUREKA_INSTANCE_LEASE_EXPIRATION_DURATION_IN_SECONDS:-30}

      # Spring Cloud Discovery 설정
      - SPRING_CLOUD_DISCOVERY_ENABLED=${SPRING_CLOUD_DISCOVERY_ENABLED:-true}
      - SPRING_CLOUD_SERVICE_REGISTRY_AUTO_REGISTRATION_ENABLED=${SPRING_CLOUD_SERVICE_REGISTRY_AUTO_REGISTRATION_ENABLED:-true}

      # Management Endpoints 설정
      - MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE=${MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE:-health,info,metrics,env,beans}
      - MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS=${MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS:-always}

      - JAVA_OPTS=-Xmx768m -Xms384m -XX:+UseG1GC -XX:MaxMetaspaceSize=256m
    deploy:
      resources:
        limits:
          memory: 1024M
          cpus: '0.3'
        reservations:
          memory: 512M
    depends_on:
      mariadb:
        condition: service_healthy
      eureka-service:
        condition: service_healthy
      config-service:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - msa-network
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8090/actuator/health" ]
      interval: 90s
      timeout: 45s
      retries: 15
      start_period: 360s

  # 라이브 스트리밍 서비스
  live-streaming-service:
    image: ${ECR_REGISTRY}/live-streaming-service:latest
    container_name: shopmall-streaming
    ports:
      - "8096:8096"
    environment:
      - SPRING_APPLICATION_NAME=live-streaming-service
      - SPRING_PROFILES_ACTIVE=${SPRING_PROFILES_ACTIVE:-prod}
      - CONFIG_SERVER_URL=${CONFIG_SERVER_URL:-http://config-service:8888}
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://eureka-service:8761/eureka
      - SPRING_CONFIG_IMPORT=optional:configserver:${CONFIG_SERVER_URL:-http://config-service:8888}
      - SPRING_REDIS_HOST=redis
      - SPRING_REDIS_PORT=6379
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092

      # RabbitMQ 환경변수
      - SPRING_RABBITMQ_HOST=rabbitmq
      - SPRING_RABBITMQ_PORT=5672
      - SPRING_RABBITMQ_USERNAME=admin
      - SPRING_RABBITMQ_PASSWORD=admin123
      - PROD_RABBITMQ_HOST=rabbitmq
      - PROD_RABBITMQ_PORT=5672
      - PROD_RABBITMQ_USERNAME=admin
      - PROD_RABBITMQ_PASSWORD=admin123

      # 데이터베이스 설정
      - SPRING_DATASOURCE_URL=${PROD_DB_URL}
      - SPRING_DATASOURCE_USERNAME=${PROD_DB_USERNAME}
      - SPRING_DATASOURCE_PASSWORD=${PROD_DB_PASSWORD}

      # 필수 환경변수들
      - PROD_REDIS_HOST=${PROD_REDIS_HOST:-redis}
      - PROD_REDIS_PORT=${PROD_REDIS_PORT:-6379}
      - PROD_REDIS_PASSWORD=${PROD_REDIS_PASSWORD:-}
      - PROD_KAFKA_SERVERS=${PROD_KAFKA_SERVERS}
      - PROD_EUREKA_SERVER_URL=${PROD_EUREKA_SERVER_URL}
      - PROD_MAIL_USERNAME=${PROD_MAIL_USERNAME}
      - PROD_MAIL_PASSWORD=${PROD_MAIL_PASSWORD}
      - PROD_USER_SERVICE_DETAIL_URL=${PROD_USER_SERVICE_DETAIL_URL}
      - HOST_IP_ADDRESS=${HOST_IP_ADDRESS}

      # Feign Client 관련 환경변수
      - PROD_NOTIFICATION_EMAIL_ENABLED=${PROD_NOTIFICATION_EMAIL_ENABLED:-true}
      - PROD_NOTIFICATION_FROM_EMAIL=${PROD_NOTIFICATION_FROM_EMAIL:-noreply@shopmall.com}
      - PROD_NOTIFICATION_FROM_NAME=${PROD_NOTIFICATION_FROM_NAME:-쇼핑몰 알림}
      - PROD_FRONTEND_BASE_URL=${PROD_FRONTEND_URL:-http://13.209.253.241}
      - PROD_UNSUBSCRIBE_URL=${PROD_UNSUBSCRIBE_URL:-http://13.209.253.241/unsubscribe}
      - PROD_BROADCAST_SERVICE_URL=${PROD_BROADCAST_SERVICE_URL:-http://commerce-service:8090/api/broadcasts}

      # Eureka 클라이언트 설정
      - EUREKA_CLIENT_ENABLED=${EUREKA_CLIENT_ENABLED:-true}
      - EUREKA_CLIENT_REGISTER_WITH_EUREKA=${EUREKA_CLIENT_REGISTER_WITH_EUREKA:-true}
      - EUREKA_CLIENT_FETCH_REGISTRY=${EUREKA_CLIENT_FETCH_REGISTRY:-true}
      - EUREKA_INSTANCE_PREFER_IP_ADDRESS=${EUREKA_INSTANCE_PREFER_IP_ADDRESS:-true}
      - EUREKA_INSTANCE_LEASE_RENEWAL_INTERVAL_IN_SECONDS=${EUREKA_INSTANCE_LEASE_RENEWAL_INTERVAL_IN_SECONDS:-10}
      - EUREKA_INSTANCE_LEASE_EXPIRATION_DURATION_IN_SECONDS=${EUREKA_INSTANCE_LEASE_EXPIRATION_DURATION_IN_SECONDS:-30}

      # Spring Cloud Discovery 설정
      - SPRING_CLOUD_DISCOVERY_ENABLED=${SPRING_CLOUD_DISCOVERY_ENABLED:-true}
      - SPRING_CLOUD_SERVICE_REGISTRY_AUTO_REGISTRATION_ENABLED=${SPRING_CLOUD_SERVICE_REGISTRY_AUTO_REGISTRATION_ENABLED:-true}

      # Management Endpoints 설정
      - MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE=${MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE:-health,info,metrics,env,beans}
      - MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS=${MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS:-always}

      # Feign Client 디버깅
      - LOGGING_LEVEL_FEIGN=DEBUG
      - LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_CLOUD_OPENFEIGN=DEBUG

      - JAVA_OPTS=-Xmx768m -Xms384m -XX:+UseG1GC -XX:MaxMetaspaceSize=256m

    deploy:
      resources:
        limits:
          memory: 1024M
          cpus: '0.3'
        reservations:
          memory: 512M
    depends_on:
      mariadb:
        condition: service_healthy
      eureka-service:
        condition: service_healthy
      config-service:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      user-service:
        condition: service_started
      commerce-service:
        condition: service_started
    networks:
      - msa-network
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8096/actuator/health" ]
      interval: 90s
      timeout: 45s
      retries: 15
      start_period: 360s

  # API Gateway
  apigateway-service:
    image: ${ECR_REGISTRY}/apigateway-service:latest
    container_name: apigateway-service
    ports:
      - "8080:8080"
    environment:
      - SPRING_APPLICATION_NAME=apigateway-service
      - SPRING_PROFILES_ACTIVE=${SPRING_PROFILES_ACTIVE:-prod}
      - CONFIG_SERVER_URL=${CONFIG_SERVER_URL:-http://config-service:8888}
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://eureka-service:8761/eureka
      - SPRING_CONFIG_IMPORT=optional:configserver:${CONFIG_SERVER_URL:-http://config-service:8888}
      - SPRING_REDIS_HOST=redis
      - SPRING_REDIS_PORT=6379
      - SPRING_RABBITMQ_HOST=rabbitmq
      - SPRING_RABBITMQ_PORT=5672
      - SPRING_RABBITMQ_USERNAME=admin
      - SPRING_RABBITMQ_PASSWORD=admin123
      - FRONTEND_URL=${FRONTEND_URL:-https://shopmall.com}
      - ADMIN_URL=${ADMIN_URL:-https://admin.shopmall.com}
      - JWT_SECRET=${PROD_JWT_SECRET_KEY}
      - HOST_IP_ADDRESS=${HOST_IP_ADDRESS}

      # Eureka 클라이언트 설정
      - EUREKA_CLIENT_ENABLED=${EUREKA_CLIENT_ENABLED:-true}
      - EUREKA_CLIENT_REGISTER_WITH_EUREKA=${EUREKA_CLIENT_REGISTER_WITH_EUREKA:-true}
      - EUREKA_CLIENT_FETCH_REGISTRY=${EUREKA_CLIENT_FETCH_REGISTRY:-true}
      - EUREKA_INSTANCE_PREFER_IP_ADDRESS=${EUREKA_INSTANCE_PREFER_IP_ADDRESS:-true}
      - EUREKA_INSTANCE_LEASE_RENEWAL_INTERVAL_IN_SECONDS=${EUREKA_INSTANCE_LEASE_RENEWAL_INTERVAL_IN_SECONDS:-10}
      - EUREKA_INSTANCE_LEASE_EXPIRATION_DURATION_IN_SECONDS=${EUREKA_INSTANCE_LEASE_EXPIRATION_DURATION_IN_SECONDS:-30}

      # Spring Cloud Discovery 설정
      - SPRING_CLOUD_DISCOVERY_ENABLED=${SPRING_CLOUD_DISCOVERY_ENABLED:-true}
      - SPRING_CLOUD_SERVICE_REGISTRY_AUTO_REGISTRATION_ENABLED=${SPRING_CLOUD_SERVICE_REGISTRY_AUTO_REGISTRATION_ENABLED:-true}

      # Management Endpoints 설정
      - MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE=${MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE:-health,info,metrics,env,beans}
      - MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS=${MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS:-always}

      - JAVA_OPTS=-Xmx512m -Xms256m -XX:+UseG1GC -XX:MaxMetaspaceSize=256m
    deploy:
      resources:
        limits:
          memory: 768M
          cpus: '0.25'
        reservations:
          memory: 384M
    depends_on:
      eureka-service:
        condition: service_healthy
      config-service:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      auth-service:
        condition: service_started
      user-service:
        condition: service_started
      commerce-service:
        condition: service_started
      live-streaming-service:
        condition: service_started
    networks:
      - msa-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/actuator/health || exit 1"]
      interval: 60s
      timeout: 30s
      retries: 5
      start_period: 300s

  # ======================
  # 프론트엔드 서버
  # ======================

  # Nginx - 프론트엔드 서버
  user-nginx:
    image: ${ECR_REGISTRY}/user-nginx:latest
    container_name: user-nginx
    ports:
      - "80:80"
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.1'
        reservations:
          memory: 64M
    depends_on:
      - apigateway-service
    networks:
      - msa-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # ======================
  # 모니터링 서비스들
  # ======================

  # Prometheus - 메트릭 수집
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: shopmall-prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    deploy:
      resources:
        limits:
          memory: 384M
          cpus: '0.2'
        reservations:
          memory: 192M
    depends_on:
      - config-service
      - eureka-service
      - auth-service
    networks:
      - msa-network
    restart: unless-stopped

  # Grafana - 시각화 대시보드
  grafana:
    image: grafana/grafana:10.0.0
    container_name: shopmall-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_SECURITY_ADMIN_USER=admin
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    deploy:
      resources:
        limits:
          memory: 384M
          cpus: '0.2'
        reservations:
          memory: 192M
    depends_on:
      - prometheus
    networks:
      - msa-network
    restart: unless-stopped

networks:
  msa-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  mariadb_data:
    driver: local
  redis_data:
    driver: local
  rabbitmq_data:
    driver: local
  kafka_data:
    driver: local
  zk_data:
    driver: local
  zk_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local