name: Backend CI/CD

on:
  push:
    branches: [ main, master ]
    paths:
      - 'apigateway-service/**'
      - 'auth-service/**'
      - 'commerce-service/**'
      - 'config-service/**'
      - 'eureka-service/**'
      - 'user-service/**'
      - 'docker-compose.yml'
      - 'pom.xml'
  pull_request:
    branches: [ main, master ]
    paths:
      - 'apigateway-service/**'
      - 'auth-service/**'
      - 'commerce-service/**'
      - 'config-service/**'
      - 'eureka-service/**'
      - 'user-service/**'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'corretto'

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build all services (skip tests)
        run: |
          # live-streaming-service 제외하고 빌드
          for service in apigateway-service auth-service commerce-service config-service eureka-service user-service; do
            echo "Building $service..."
            cd $service
            if [ -f "pom.xml" ]; then
              chmod +x ./mvnw
              ./mvnw clean compile -DskipTests -Dmaven.test.skip=true -f pom.xml
            fi
            cd ..
          done

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'corretto'

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build JAR files
        run: |
          # live-streaming-service 제외하고 JAR 빌드
          for service in eureka-service config-service auth-service user-service commerce-service apigateway-service; do
            echo "Building JAR for $service..."
            cd $service
            if [ -f "pom.xml" ]; then
              chmod +x ./mvnw
              ./mvnw clean package -DskipTests -f pom.xml
            fi
            cd ..
          done

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push Docker images to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          services="eureka-service config-service auth-service user-service commerce-service apigateway-service"
          
          for service in $services; do
            echo "Building and pushing $service..."
            if [ -f "$service/Dockerfile" ]; then
              docker build -t $ECR_REGISTRY/$service:latest ./$service
              docker push $ECR_REGISTRY/$service:latest
            fi
          done

      - name: Copy files to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "docker-compose.yml,init-db"
          target: "/home/ec2-user/app/"

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd /home/ec2-user/app

            # 환경변수 설정
            export DB_ROOT_PASSWORD="${{ secrets.DB_ROOT_PASSWORD }}"
            export DB_NAME="${{ secrets.DB_NAME }}"
            export DB_USERNAME="${{ secrets.DB_USERNAME }}"
            export DB_PASSWORD="${{ secrets.DB_PASSWORD }}"
            export PROD_JWT_SECRET_KEY="${{ secrets.JWT_SECRET_KEY }}"
            export CONFIG_SERVER_PASSWORD="${{ secrets.CONFIG_SERVER_PASSWORD }}"
            export ECR_REGISTRY="${{ steps.login-ecr.outputs.registry }}"
            export SPRING_PROFILES_ACTIVE="prod"

            # AWS ECR 로그인
            aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin $ECR_REGISTRY

            # 기존 컨테이너 정리
            docker-compose down || true
            docker system prune -f || true

            # 데이터베이스 먼저 시작
            echo "Starting MariaDB..."
            docker-compose up -d mariadb
            sleep 60

            # 인프라 서비스 시작
            echo "Starting Redis, Kafka..."
            docker-compose up -d redis zookeeper
            sleep 20
            docker-compose up -d kafka
            sleep 30

            # 서비스 순차 시작
            echo "Starting Eureka Service..."
            docker-compose up -d eureka-service
            sleep 30

            echo "Starting Config Service..."
            docker-compose up -d config-service
            sleep 20

            echo "Starting Auth and User Services..."
            docker-compose up -d auth-service user-service
            sleep 20

            echo "Starting Commerce Service..."
            docker-compose up -d commerce-service
            sleep 20

            echo "Starting API Gateway..."
            docker-compose up -d apigateway-service
            sleep 10

            # 헬스체크
            echo "Checking service health..."
            for i in {1..10}; do
              if curl -f http://localhost:8080/actuator/health; then
                echo "✅ Services are healthy!"
                break
              else
                echo "⏳ Waiting for services to be ready... ($i/10)"
                sleep 10
              fi
            done

            # 최종 상태 확인
            docker-compose ps