name: Backend CI/CD

on:
  push:
    branches: [ main, master ]
    paths:
      - 'apigateway-service/**'
      - 'auth-service/**'
      - 'commerce-service/**'
      - 'config-service/**'
      - 'eureka-service/**'
      - 'live-streaming-service/**'
      - 'user-service/**'
      - 'docker-compose.yml'
      - '.github/workflows/**'
      - 'pom.xml'
  pull_request:
    branches: [ main, master ]
    paths:
      - 'apigateway-service/**'
      - 'auth-service/**'
      - 'commerce-service/**'
      - 'config-service/**'
      - 'eureka-service/**'
      - 'live-streaming-service/**'
      - 'user-service/**'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'corretto'

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build all services (skip tests)
        run: |
          for service in apigateway-service auth-service commerce-service config-service eureka-service live-streaming-service user-service; do
            echo "Building $service..."
            cd $service
            if [ -f "pom.xml" ]; then
              chmod +x ./mvnw
              ./mvnw clean compile -DskipTests -Dmaven.test.skip=true -f pom.xml
            fi
            cd ..
          done

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'corretto'

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build JAR files
        run: |
          # 의존성 순서대로 빌드: config -> eureka -> 나머지 서비스들
          for service in config-service eureka-service auth-service user-service commerce-service live-streaming-service apigateway-service; do
            echo "Building JAR for $service..."
            cd $service
            if [ -f "pom.xml" ]; then
              chmod +x ./mvnw
              ./mvnw clean package -DskipTests -f pom.xml
            fi
            cd ..
          done

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push Docker images to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          services="config-service eureka-service auth-service user-service commerce-service live-streaming-service apigateway-service"
          
          for service in $services; do
            echo "Building and pushing $service..."
            if [ -f "$service/Dockerfile" ]; then
              docker build -t $ECR_REGISTRY/$service:latest ./$service
              docker push $ECR_REGISTRY/$service:latest
            fi
          done

      - name: Create .env file for deployment
        run: |
          cat > .env << EOF
          # AWS ECR
          ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
          
          # Spring 환경
          SPRING_PROFILES_ACTIVE=prod
          
          # Config Server URL (핵심!)
          CONFIG_SERVER_URL=http://config-service:8888
          
          # Database - 기본 변수들
          DB_ROOT_PASSWORD=${{ secrets.DB_ROOT_PASSWORD }}
          DB_NAME=${{ secrets.DB_NAME }}
          DB_USERNAME=${{ secrets.DB_USERNAME }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          
          # Database - PROD 변수들 (핵심!)
          PROD_DB_URL=${{ secrets.PROD_DB_URL }}
          PROD_DB_USERNAME=${{ secrets.PROD_DB_USERNAME }}
          PROD_DB_PASSWORD=${{ secrets.PROD_DB_PASSWORD }}
          
          # Config Server Git 설정
          CONFIG_REPO_GIT_URI=${{ secrets.CONFIG_REPO_GIT_URI }}
          CONFIG_GIT_USERNAME=${{ secrets.CONFIG_GIT_USERNAME }}
          CONFIG_GIT_PASSWORD=${{ secrets.CONFIG_GIT_PASSWORD }}
          CONFIG_SERVER_USERNAME=config
          CONFIG_SERVER_PASSWORD=${{ secrets.CONFIG_SERVER_PASSWORD }}
          
          # Production secrets
          PROD_REDIS_HOST=${{ secrets.PROD_REDIS_HOST }}
          PROD_REDIS_PORT=${{ secrets.PROD_REDIS_PORT }}
          PROD_REDIS_PASSWORD=${{ secrets.PROD_REDIS_PASSWORD }}
          PROD_MAIL_USERNAME=${{ secrets.PROD_MAIL_USERNAME }}
          PROD_MAIL_PASSWORD=${{ secrets.PROD_MAIL_PASSWORD }}
          PROD_JWT_SECRET_KEY=${{ secrets.PROD_JWT_SECRET_KEY }}
          PROD_KAFKA_SERVERS=${{ secrets.PROD_KAFKA_SERVERS }}
          PROD_KAFKA_TOPIC_USER_WITHDRAWAL=${{ secrets.PROD_KAFKA_TOPIC_USER_WITHDRAWAL }}
          PROD_AUTH_SERVICE_URL=${{ secrets.PROD_AUTH_SERVICE_URL }}
          PROD_USER_SERVICE_URL=${{ secrets.PROD_USER_SERVICE_URL }}
          PROD_USER_SERVICE_DETAIL_URL=${{ secrets.PROD_USER_SERVICE_DETAIL_URL }}
          PROD_RABBITMQ_HOST=${{ secrets.PROD_RABBITMQ_HOST }}
          PROD_RABBITMQ_USERNAME=${{ secrets.PROD_RABBITMQ_USERNAME }}
          PROD_RABBITMQ_PASSWORD=${{ secrets.PROD_RABBITMQ_PASSWORD }}
          PROD_EUREKA_SERVER_URL=${{ secrets.PROD_EUREKA_SERVER_URL }}
          PROD_IAMPORT_API_KEY=${{ secrets.PROD_IAMPORT_API_KEY }}
          PROD_IAMPORT_API_SECRET=${{ secrets.PROD_IAMPORT_API_SECRET }}
          PROD_IMAGE_UPLOAD_PATH=/app/uploads/products/
          PROD_IMAGE_BASE_URL=${{ secrets.PROD_IMAGE_BASE_URL }}
          
          # Network 설정
          HOST_IP_ADDRESS=${{ secrets.HOST_IP_ADDRESS }}
          
          # Frontend URLs
          FRONTEND_URL=${{ secrets.FRONTEND_URL }}
          ADMIN_URL=${{ secrets.ADMIN_URL }}
          
          # Kafka
          KAFKA_HOST=kafka
          EOF

      - name: Copy files to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "docker-compose.yml,init-db,.env"
          target: "/home/ec2-user/app/"

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          command_timeout: 30m
          script: |
            cd /home/ec2-user/app

            # Load environment variables
            source .env

            # AWS ECR 로그인
            aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin $ECR_REGISTRY

            # 기존 컨테이너 정리 (순서대로)
            echo "🛑 Stopping existing containers..."
            docker-compose down --remove-orphans || true
            docker system prune -f || true

            # === 단계 1: 인프라 서비스 시작 ===
            echo "🗄️ Starting infrastructure services..."
            docker-compose up -d mariadb redis rabbitmq
            
            echo "⏳ Waiting for infrastructure services to be ready..."
            sleep 60

            # === 단계 2: Zookeeper와 Kafka 시작 ===
            echo "📡 Starting Zookeeper..."
            docker-compose up -d zookeeper
            sleep 30

            echo "🔄 Starting Kafka..."
            docker-compose up -d kafka
            sleep 40

            # === 단계 3: Config Service 시작 (충분한 시간!) ===
            echo "⚙️ Starting Config Service..."
            docker-compose up -d config-service
            
            # Config Service 헬스체크 (25번 × 15초 = 375초 = 6.25분)
            echo "🔍 Waiting for Config Service to be healthy..."
            for i in {1..25}; do
              if curl -f http://localhost:8888/actuator/health > /dev/null 2>&1; then
                echo "✅ Config Service is healthy!"
                break
              else
                echo "⏳ Config Service not ready yet... ($i/25)"
                sleep 15
              fi
            done

            # === 단계 4: Eureka Service 시작 ===
            echo "🌐 Starting Eureka Service..."
            docker-compose up -d eureka-service
            
            # Eureka Service 헬스체크 (20번 × 20초 = 400초 = 6.7분)
            echo "🔍 Waiting for Eureka Service to be healthy..."
            for i in {1..20}; do
              if curl -f http://localhost:8761/actuator/health > /dev/null 2>&1; then
                echo "✅ Eureka Service is healthy!"
                break
              else
                echo "⏳ Eureka Service not ready yet... ($i/20)"
                sleep 20
              fi
            done

            # === 단계 5: 비즈니스 서비스들 시작 ===
            echo "🏪 Starting business services..."
            docker-compose up -d auth-service user-service commerce-service live-streaming-service
            
            # 비즈니스 서비스들 시작 대기
            echo "⏳ Waiting for business services to start..."
            sleep 90

            # === 단계 6: API Gateway 시작 ===
            echo "🚪 Starting API Gateway..."
            docker-compose up -d apigateway-service
            
            # API Gateway 시작 대기
            echo "⏳ Waiting for API Gateway to start..."
            sleep 60

            # === 최종 헬스체크 ===
            echo "🔍 Final health check..."
            
            # 개별 서비스 상태 확인 (관대한 체크)
            services=(
              "config-service:8888"
              "eureka-service:8761" 
              "auth-service:8082"
              "user-service:8103"
              "commerce-service:8090"
              "live-streaming-service:8096"
              "apigateway-service:8080"
            )
            
            for service_port in "${services[@]}"; do
              service_name=$(echo $service_port | cut -d':' -f1)
              port=$(echo $service_port | cut -d':' -f2)
              echo "Checking $service_name on port $port..."
            
              # 3번 재시도
              for attempt in {1..3}; do
                if curl -f http://localhost:$port/actuator/health > /dev/null 2>&1; then
                  echo "✅ $service_name is healthy"
                  break
                else
                  echo "⏳ $service_name attempt $attempt/3..."
                  sleep 10
                fi
              done
            done

            # 컨테이너 상태 확인
            echo "📊 Container status:"
            docker-compose ps

            # 메모리 사용량 확인
            echo "💾 Memory usage:"
            docker stats --no-stream

            # Eureka 등록된 서비스 확인
            echo "🌐 Checking registered services in Eureka..."
            curl -s http://localhost:8761/eureka/apps | grep -o '<name>[^<]*</name>' | sed 's/<[^>]*>//g' || echo "Could not fetch Eureka registry"

            echo "🚀 Deployment completed!"