name: Backend CI/CD

on:
  push:
    branches: [ main, master ]
    paths:
      - 'apigateway-service/**'
      - 'auth-service/**'
      - 'commerce-service/**'
      - 'config-service/**'
      - 'eureka-service/**'
      - 'live-streaming-service/**'
      - 'user-service/**'
      - 'docker-compose.yml'
      - 'pom.xml'
  pull_request:
    branches: [ main, master ]
    paths:
      - 'apigateway-service/**'
      - 'auth-service/**'
      - 'commerce-service/**'
      - 'config-service/**'
      - 'eureka-service/**'
      - 'live-streaming-service/**'
      - 'user-service/**'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'corretto'

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build all services (skip tests)
        run: |
          # 각 서비스별로 컴파일만 확인 (테스트 완전 스킵)
          for service in apigateway-service auth-service commerce-service config-service eureka-service live-streaming-service user-service; do
            echo "Building $service..."
            cd $service
            if [ -f "pom.xml" ]; then
              chmod +x ./mvnw
              ./mvnw clean compile -DskipTests -Dmaven.test.skip=true -f pom.xml
            fi
            cd ..
          done

  build-docker-images:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'corretto'

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build JAR files
        run: |
          # 각 서비스별로 JAR 파일 빌드
          for service in eureka-service config-service auth-service user-service commerce-service live-streaming-service apigateway-service; do
            echo "Building JAR for $service..."
            cd $service
            if [ -f "pom.xml" ]; then
              chmod +x ./mvnw
              ./mvnw clean package -DskipTests -f pom.xml
            fi
            cd ..
          done

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker images
        run: |
          for service in eureka-service config-service auth-service user-service commerce-service live-streaming-service apigateway-service; do
            echo "Building Docker image for $service..."
            if [ -f "$service/Dockerfile" ]; then
              docker build -t $service:latest ./$service
            fi
          done

      - name: Docker images built successfully
        run: |
          echo "✅ 모든 Docker 이미지 빌드 완료!"
          echo "📦 빌드된 이미지들:"
          docker images | grep -E "(eureka-service|config-service|auth-service|user-service|commerce-service|live-streaming-service|apigateway-service)"
          echo ""
          echo "🚀 배포 준비 완료!"

      # ======================
      # EC2 배포 부분 (활성화)
      # ======================

#      - name: Save Docker images
#        run: |
#          docker save -o backend-images.tar \
#            eureka-service:latest \
#            config-service:latest \
#            auth-service:latest \
#            user-service:latest \
#            commerce-service:latest \
#            live-streaming-service:latest \
#            apigateway-service:latest
#
#      - name: Copy files to EC2
#        uses: appleboy/scp-action@v0.1.7
#        with:
#          host: ${{ secrets.EC2_HOST }}
#          username: ${{ secrets.EC2_USERNAME }}
#          key: ${{ secrets.EC2_SSH_KEY }}
#          source: "backend-images.tar,docker-compose.yml,init-db"
#          target: "/home/ec2-user/app/"
#
#      - name: Deploy to EC2
#        uses: appleboy/ssh-action@v1.0.3
#        with:
#          host: ${{ secrets.EC2_HOST }}
#          username: ${{ secrets.EC2_USERNAME }}
#          key: ${{ secrets.EC2_SSH_KEY }}
#          script: |
#            cd /home/ec2-user/app
#
#            # 환경변수 설정
#            export DB_ROOT_PASSWORD="${{ secrets.DB_ROOT_PASSWORD }}"
#            export DB_NAME="${{ secrets.DB_NAME }}"
#            export DB_USERNAME="${{ secrets.DB_USERNAME }}"
#            export DB_PASSWORD="${{ secrets.DB_PASSWORD }}"
#            export PROD_JWT_SECRET_KEY="${{ secrets.JWT_SECRET_KEY }}"
#            export SPRING_PROFILES_ACTIVE="prod"
#
#            # 기존 컨테이너 정리
#            docker-compose down || true
#            docker system prune -f || true
#
#            # 새 이미지 로드
#            docker load -i backend-images.tar
#
#            # 데이터베이스 먼저 시작
#            echo "Starting MariaDB..."
#            docker-compose up -d mariadb
#            sleep 60  # DB 초기화 대기
#
#            # 인프라 서비스 시작
#            echo "Starting Redis, Kafka..."
#            docker-compose up -d redis zookeeper
#            sleep 20
#            docker-compose up -d kafka
#            sleep 30
#
#            # 서비스 순차 시작
#            echo "Starting Eureka Service..."
#            docker-compose up -d eureka-service
#            sleep 30
#
#            echo "Starting Config Service..."
#            docker-compose up -d config-service
#            sleep 20
#
#            echo "Starting Auth and User Services..."
#            docker-compose up -d auth-service user-service
#            sleep 20
#
#            echo "Starting Commerce and Live Streaming Services..."
#            docker-compose up -d commerce-service live-streaming-service
#            sleep 20
#
#            echo "Starting API Gateway..."
#            docker-compose up -d apigateway-service
#            sleep 10
#
#            # 헬스체크
#            echo "Checking service health..."
#            for i in {1..10}; do
#              if curl -f http://localhost:8080/actuator/health; then
#                echo "Services are healthy!"
#                break
#              else
#                echo "Waiting for services to be ready... ($i/10)"
#                sleep 10
#              fi
#            done

            # 최종 상태 확인
            docker-compose ps
        env:
          DB_ROOT_PASSWORD: ${{ secrets.DB_ROOT_PASSWORD }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}