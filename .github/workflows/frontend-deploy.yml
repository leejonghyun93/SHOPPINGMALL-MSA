name: Frontend CI/CD (Nginx Docker)

on:
  push:
    branches: [ main, master ]
    # paths 조건 제거해서 모든 push에서 실행되도록
    paths:
      - 'ui-service/**'
      - 'nginx-docker/**'
  pull_request:
    branches: [ main, master ]
    paths:
      - 'ui-service/**'
      - 'nginx-docker/**'

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: ui-service/package-lock.json

      - name: Install dependencies
        run: |
          cd ui-service
          npm ci

      - name: Run linting
        run: |
          cd ui-service
          npm run lint || true

      - name: Run tests
        run: |
          cd ui-service
          if [ -f "package.json" ] && grep -q "test" package.json; then
            npm run test:unit || true
          else
            echo "No tests found, skipping..."
          fi

      - name: Build Vue application
        run: |
          cd ui-service
          npm run build

      - name: Prepare nginx-docker
        run: |
          mkdir -p nginx-docker/vue-dist
          rm -rf nginx-docker/vue-dist/*
          cp -r ui-service/dist/* nginx-docker/vue-dist/

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: nginx-docker-files
          path: nginx-docker/

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    steps:
      - uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: nginx-docker-files
          path: nginx-docker/

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push Nginx Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: user-nginx
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd nginx-docker
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}
            docker stop user-nginx || true
            docker rm user-nginx || true
            docker pull ${{ steps.login-ecr.outputs.registry }}/user-nginx:latest
            docker run -d \
              --name user-nginx \
              --network app_msa-network
              -p 80:80 \
              -p 443:443 \
              --restart unless-stopped \
              ${{ steps.login-ecr.outputs.registry }}/user-nginx:latest
            sleep 5
            docker ps | grep user-nginx
            echo "Checking Nginx health..."
            for i in {1..5}; do
              if curl -f http://localhost/; then
                echo "✅ Nginx is healthy!"
                break
              else
                echo "⏳ Waiting for Nginx to be ready... ($i/5)"
                sleep 5
              fi
            done
            docker image prune -f
