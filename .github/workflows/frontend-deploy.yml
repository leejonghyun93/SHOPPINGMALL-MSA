name: Frontend CI/CD (Fixed)

on:
  push:
    branches: [ main, master ]
    paths:
      - 'ui-service/**'
      - 'nginx-docker/**'
  pull_request:
    branches: [ main, master ]
    paths:
      - 'ui-service/**'
      - 'nginx-docker/**'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: ui-service/package-lock.json

      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: ui-service/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('ui-service/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: |
          cd ui-service
          npm ci --prefer-offline --no-audit

      - name: Run quality checks
        run: |
          cd ui-service
          npm run lint &
          if grep -q "test" package.json; then
            npm run test:unit &
          fi
          wait

      - name: Create production environment
        run: |
          cd ui-service
          cat > .env.production << EOF
          VITE_API_URL=${{ secrets.PROD_API_BASE_URL || 'http://13.209.253.241:8080' }}
          VITE_PROD_WS_URL=${{ secrets.VITE_PROD_WS_URL }}
          VITE_NOTIFICATION_URL=${{ secrets.PROD_NOTIFICATION_URL || 'http://13.209.253.241:8096/api/notifications' }}
          VITE_FRONTEND_URL=${{ secrets.PROD_FRONTEND_URL || 'https://shopmall.com' }}
          VITE_KAKAO_CLIENT_ID=${{ secrets.PROD_KAKAO_CLIENT_ID }}
          VITE_NAVER_CLIENT_ID=${{ secrets.PROD_NAVER_CLIENT_ID }}
          VITE_REDIRECT_URI=${{ secrets.PROD_SOCIAL_REDIRECT_URI }}
          EOF

      - name: Build application
        run: |
          cd ui-service
          NODE_ENV=production npm run build
          
          if [ ! -f "dist/index.html" ]; then
            echo "Build failed - index.html not found"
            exit 1
          fi
          
          echo "Build completed successfully!"
          ls -la dist/

      - name: Configure AWS credentials
        if: github.ref == 'refs/heads/main'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Login to Amazon ECR
        if: github.ref == 'refs/heads/main'
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        if: github.ref == 'refs/heads/main'
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: image=moby/buildkit:buildx-stable-1

      - name: Prepare Docker build context
        if: github.ref == 'refs/heads/main'
        run: |
          mkdir -p nginx-docker/vue-dist
          cp -r ui-service/dist/* nginx-docker/vue-dist/
          
          echo "Docker build context prepared:"
          ls -la nginx-docker/
          ls -la nginx-docker/vue-dist/

      - name: Build and push Docker image with retry
        if: github.ref == 'refs/heads/main'
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          cd nginx-docker
          
          for i in {1..3}; do
            echo "Docker build attempt $i/3"
          
            if docker buildx build \
              --platform linux/amd64 \
              --cache-from type=gha,scope=nginx \
              --cache-to type=gha,mode=max,scope=nginx \
              --push \
              --tag $ECR_REGISTRY/user-nginx:latest \
              --tag $ECR_REGISTRY/user-nginx:${{ github.sha }} \
              --progress=plain \
              .; then
              echo "Docker build successful!"
              break
            else
              echo "Docker build failed (attempt $i/3)"
              if [ $i -eq 3 ]; then
                echo "All 3 attempts failed"
                exit 1
              fi
              echo "Retrying in 30 seconds..."
              sleep 30
            fi
          done

      - name: Deploy to EC2 with Zero Downtime
        if: github.ref == 'refs/heads/main'
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e
            
            aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}
            
            echo "Pulling new image..."
            docker pull ${{ steps.login-ecr.outputs.registry }}/user-nginx:latest
            
            echo "Starting blue-green deployment..."
            
            docker run -d \
              --name user-nginx-new \
              --network app_msa-network \
              -p 81:80 \
              --restart unless-stopped \
              ${{ steps.login-ecr.outputs.registry }}/user-nginx:latest
            
            echo "Health checking new container..."
            for i in {1..10}; do
              if curl -f http://localhost:81/health > /dev/null 2>&1; then
                echo "New container is healthy!"
                break
              else
                echo "Waiting for new container... ($i/10)"
                sleep 3
              fi
            done
            
            echo "Switching ports..."
            docker stop user-nginx || true
            docker rm user-nginx || true
            
            docker stop user-nginx-new
            docker run -d \
              --name user-nginx \
              --network app_msa-network \
              -p 80:80 \
              -p 443:443 \
              --restart unless-stopped \
              ${{ steps.login-ecr.outputs.registry }}/user-nginx:latest
            
            docker rm user-nginx-new || true
            
            echo "Final health check..."
            sleep 5
            curl -f http://localhost/health && echo "Deployment successful!"
            
            docker image prune -f
            echo "Zero-downtime deployment completed!"