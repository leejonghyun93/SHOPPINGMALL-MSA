name: Frontend CI/CD

on:
  push:
    branches: [ main, master ]
    paths:
      - 'ui-service/**'
  pull_request:
    branches: [ main, master ]
    paths:
      - 'ui-service/**'

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: ui-service/package-lock.json

      - name: Install dependencies
        run: |
          cd ui-service
          npm ci

      - name: Run linting
        run: |
          cd ui-service
          npm run lint || true  # 린팅 실패해도 계속 진행

      - name: Run tests
        run: |
          cd ui-service
          # 테스트가 있다면 실행, 없으면 스킵
          if [ -f "package.json" ] && grep -q "test" package.json; then
            npm run test:unit || true
          else
            echo "No tests found, skipping..."
          fi

      - name: Build application
        run: |
          cd ui-service
          npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-files
          path: ui-service/dist/

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    steps:
      - uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist-files
          path: dist/

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Sync to S3
        run: |
          aws s3 sync dist/ s3://${{ secrets.S3_BUCKET_NAME }} --delete
          aws s3 cp dist/index.html s3://${{ secrets.S3_BUCKET_NAME }}/index.html \
            --metadata-directive REPLACE \
            --cache-control "no-cache, no-store, must-revalidate"

      - name: Invalidate CloudFront (if exists)
        run: |
          if [ -n "${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}" ]; then
            aws cloudfront create-invalidation \
              --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} \
              --paths "/*"
          else
            echo "CloudFront distribution ID not found, skipping invalidation"
          fi